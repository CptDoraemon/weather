{"version":3,"sources":["components/header.js","components/icon.js","components/day-chart.js","components/hour-chart.js","components/selected-summary.js","components/loading.js","App.js","utilities/weather-query.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","geoData","getDisplayTime","selectedDataObj","time","isDaySummary","summary","Component","Icon","style","width","height","objectFit","filename","indexOf","icon","src","process","alt","React","Daily","onClick","setSelectedDataObj","obj","setIsDaySummary","setHourChartOffset","dayIndex","icon_Icon","temperatureHigh","temperatureLow","DayChart","_this","dayName","objArray","map","index","isCelsius","Math","round","fToC","key","Date","getDay","UpperTextInChart","fill","fontSize","fontWeight","cursor","x","y","text","NoData","textTransform","Fragment","i","wrapperWidth","noDataCenterOffset","svgHeight","textAnchor","HourChart","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isReady","tempMax","tempMin","svgWidth","tempArray","xInterval","topTextArea","bottomTextArea","lowestTemperatureHeight","wrapperRef","createRef","temperature","usableHeightForChart","chartTop","result","tempText","chartBot","timeText","hasOwnProperty","tempArraySorted","slice","sort","b","length","wrapperStyle","window","getComputedStyle","current","parseInt","getPropertyValue","setState","svgOffset","_this2","lineStyle","stroke","strokeWidth","fillStyle","timeTextStyle","lines","last","getCoordinateY","that","lastX","thatX","temperatureF","hour","getHours","x1","y1","x2","y2","points","concat","hourOrigin","firstDayOffset","hourChartOffset","svg","transform","ref","UnitSwitcher","unitSwitcher","SelectedSummaryLeft","SelectedSummaryRight","precipitation","humidity","windSpeed","SelectedSummary","undefined","precipProbability","mph","mphToKmh","Loading","isTimeout","timeout","showTimeoutMessage","bind","assertThisInitialized","refresh","location","reload","setTimeout","clearTimeout","spanArray","animationDelay","span","charAt","push","timeoutWrapper","AppLoaded","weatherData","currently","timeStamp","isDayOnly","dateObj","dayOnly","hours","minutes","getMinutes","f","isCelsiusNow","trueOrFalse","day","states","data","tools","injectProps","objectSpread","header_Header","selected_summary_SelectedSummary","hour_chart_HourChart","hourly","day_chart_DayChart","daily","Attributions","href","target","rel","WrappedComponent","App","isFailed","errorMessage","isLoaded","App_AppLoaded","loading_Loading","WithWeatherQueryApp","_Component","_class","latitude","longitude","sendQuery","useMockLoacation","getGeoLocation","inherits","createClass","value","isWeatherReady","isGeocodingReady","origin","fetchOptions","method","mode","cache","credentials","headers","content-type","redirect","referrer","body","JSON","stringify","fetch","then","res","json","status","console","log","catch","e","_this3","navigator","geolocation","getCurrentPosition","position","coords","assign","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.fc96745a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.css';\nimport '../App.css';\n\nexport default class Header extends Component {\n    render() {\n\n        return (\n            <div className='header-wrapper quarter-height-wrapper grey'>\n                <h1> { this.props.geoData } </h1>\n                <h2> { this.props.getDisplayTime(this.props.selectedDataObj.time, this.props.isDaySummary) } </h2>\n                <h2> { this.props.selectedDataObj.summary } </h2>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Icon extends React.Component {\n    render() {\n        const style = {\n            width: this.props.width,\n            height: this.props.height,\n            objectFit: 'cover'\n        };\n        const availableIcons = ['clear-day', 'clear-night', 'rain', 'snow', 'sleet', 'wind', 'fog', 'cloudy', 'partly-cloudy-day', 'partly-cloudy-night'];\n        const filename = availableIcons.indexOf(this.props.icon) === -1 ? 'na.svg' : this.props.icon + '.svg';\n        return (\n            <img src={process.env.PUBLIC_URL + '/svg/' + filename} style={style} alt={this.props.icon} />\n        )\n    }\n};","import React, { Component } from 'react';\nimport './day-chart.css';\nimport '../App.css';\nimport Icon from './icon';\n\nfunction Daily(props) {\n    return (\n        <div\n            className='daily-wrapper'\n            onClick={()=>{\n                props.setSelectedDataObj(props.obj);\n                props.setIsDaySummary(true);\n                props.setHourChartOffset(props.dayIndex)\n            }}\n        >\n            { props.time }\n            <Icon width='50px' height='50px' icon={props.icon}/>\n            <div className='daily-temp'>\n                <span className='daily-temp-high'>{ props.temperatureHigh }&#176;</span>\n                <span className='daily-temp-low'>{ props.temperatureLow }&#176;</span>\n            </div>\n        </div>\n    )\n}\n\nexport default class DayChart extends Component {\n    render() {\n        const dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n        return (\n            <div className='daychart-wrapper quarter-height-wrapper'>\n                { this.props.objArray.map((obj, index) => {\n                    const temperatureHigh = this.props.isCelsius ? Math.round(this.props.fToC(obj.temperatureHigh)) : Math.round(obj.temperatureHigh);\n                    const temperatureLow = this.props.isCelsius ? Math.round(this.props.fToC(obj.temperatureLow)) : Math.round(obj.temperatureLow);\n                    return (\n                        <Daily\n                            key={obj.time}\n                            icon={obj.icon}\n                            time={dayName[(new Date(obj.time * 1000)).getDay()]}\n                            temperatureHigh={temperatureHigh}\n                            temperatureLow={temperatureLow}\n                            obj={obj}\n                            setSelectedDataObj={this.props.setSelectedDataObj}\n                            setIsDaySummary={this.props.setIsDaySummary}\n                            setHourChartOffset={this.props.setHourChartOffset}\n                            dayIndex={index}\n                        />\n                        )\n                }) }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './hour-chart.css';\n\nfunction UpperTextInChart(props) {\n    const tempTextInactive = {\n        fill: 'rgb(150, 150, 150)',\n        fontSize: '12px',\n        fontWeight: 700,\n        cursor: 'pointer',\n    };\n    const tempTextStyleActive = {\n        fill: 'rgb(0, 0, 0)',\n        fontSize: '12px',\n        fontWeight: 700\n    };\n    const style = props.obj.time === props.selectedDataObj.time ? tempTextStyleActive : tempTextInactive;\n    return (\n        <text\n            x={props.x}\n            y={props.y}\n            style={style}\n            onClick={() => {\n                props.setSelectedDataObj(props.obj);\n                props.setIsDaySummary(false)\n            }}\n        >{ props.text }</text>\n    )\n}\nfunction NoData(props) {\n    const style = {\n        fill: 'rgba(0, 0, 0, 0.2)',\n        fontSize: '14px',\n        fontWeight: 700,\n        textTransform: 'uppercase',\n    };\n    const array = [2, 3, 4, 5, 6];\n    return (\n        <React.Fragment>\n        {\n            array.map(i =>\n            <text\n                key={'nodata'+i}\n                x={props.wrapperWidth * (i + 0.5) + props.noDataCenterOffset}\n                y={props.svgHeight * 0.5}\n                style={style}\n                textAnchor='middle'\n            >Hourly forecasts are only available for next 48 hours</text>\n            )\n        }\n        </React.Fragment>\n    )\n}\n\nexport default class HourChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.tempMax = null;\n        this.tempMin = null;\n        this.wrapperWidth = null;\n        this.svgHeight = null;\n        this.svgWidth = null;\n        this.tempArray = null;\n        this.xInterval = null;\n        this.topTextArea = null;\n        this.bottomTextArea = null;\n        this.lowestTemperatureHeight = null;\n\n        this.wrapperRef = React.createRef();\n    }\n    getCoordinateY(temperature) {\n        // NOT INVERTED UNTIL RIGHT BEFORE RETURN\n        const usableHeightForChart = this.svgHeight - this.topTextArea - this.bottomTextArea - this.lowestTemperatureHeight;\n        const y = ((temperature - this.tempMin) / (this.tempMax - this.tempMin)) * usableHeightForChart;\n        const chartTop = this.bottomTextArea + this.lowestTemperatureHeight + y;\n\n        const result = {\n            tempText: chartTop + 10,\n            chartTop: chartTop,\n            chartBot: this.bottomTextArea,\n            timeText: 5\n        };\n        // invert\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                result[key] = this.svgHeight - result[key];\n            }\n        }\n        return result\n    }\n    componentDidMount() {\n        this.tempArray = this.props.objArray.map(obj => obj.temperature);\n        const tempArraySorted = this.tempArray.slice().sort((a, b) => a - b);\n        this.tempMax = tempArraySorted[tempArraySorted.length - 1];\n        this.tempMin = tempArraySorted[0];\n        //\n        const wrapperStyle = window.getComputedStyle(this.wrapperRef.current, null);\n        this.wrapperWidth = window.parseInt(wrapperStyle.getPropertyValue(\"width\"));\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        //\n        this.topTextArea = 20;\n        this.bottomTextArea = 20;\n        this.lowestTemperatureHeight = 10;\n        //\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        // this.props.objArray;\n        const lineStyle = {\n            stroke: 'rgb(29, 161, 242)',\n            strokeWidth: 2\n        };\n        const fillStyle = {\n            fill: 'rgba(29, 161, 242, 0.5)'\n        };\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: '12px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if (index !== 0) {\n                            const last = this.getCoordinateY(this.props.objArray[index - 1].temperature);\n                            const that = this.getCoordinateY(obj.temperature);\n                            const lastX = (index - 1) * this.xInterval;\n                            const thatX = index * this.xInterval;\n\n                            const temperatureF = this.props.objArray[index - 1].temperature;\n                            const temperature = this.props.isCelsius ? Math.round(this.props.fToC(temperatureF)) : Math.round(temperatureF);\n                            //\n                            const hour = new Date(obj.time * 1000).getHours() + ':00';\n                            //\n                            return (\n                                <React.Fragment key={obj.time}>\n                                    <line  x1={lastX} y1={last.chartTop} x2={thatX} y2={that.chartTop} style={lineStyle} />\n                                    <polygon points={`${lastX},${last.chartBot} ${lastX},${last.chartTop} ${thatX},${that.chartTop} ${thatX},${that.chartBot}`} style={fillStyle} />\n\n                                    {\n                                        (index - 1) % 3 === 0 ?\n                                            <React.Fragment>\n                                                <UpperTextInChart\n                                                    x={lastX}\n                                                    y={last.tempText}\n                                                    text={temperature}\n                                                    obj={this.props.objArray[index - 1]}\n                                                    selectedDataObj={this.props.selectedDataObj}\n                                                    setSelectedDataObj={this.props.setSelectedDataObj}\n                                                    setIsDaySummary={this.props.setIsDaySummary}\n                                                />\n                                                <text x={lastX} y={last.timeText} style={timeTextStyle}>{ hour }</text>\n                                            </React.Fragment>\n                                            : null\n                                    }\n\n\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = (24 - hourOrigin) === 24 ? 0 : 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <div className='hour-chart-wrapper quarter-height-wrapper' ref={this.wrapperRef}>\n                { this.state.isReady ? svg : null }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './selected-summary.css';\nimport '../App.css'\nimport Icon from './icon';\n\nfunction UnitSwitcher(props) {\n    return (\n        <div className='unit-switcher-wrapper'>\n            {/*c*/}\n            <span\n                className={!props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}\n                onClick={() => props.unitSwitcher(false)}>&#176;C</span>\n            <span> | </span>\n            {/*f*/}\n            <span\n                onClick={() => props.unitSwitcher(true)}\n                className={props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}>&#176;F</span>\n        </div>\n    )\n}\nfunction SelectedSummaryLeft(props) {\n    return (\n        <div className='selected-summary-left-wrapper'>\n            <Icon icon={props.icon} width='80px' height='80px'/>\n            <div className='selected-summary-temperature'> {props.temperature} </div>\n            <UnitSwitcher unitSwitcher={props.unitSwitcher} isCelsius={props.isCelsius}/>\n        </div>\n    )\n}\nfunction SelectedSummaryRight(props) {\n    return (\n        <div className='selected-summary-right-wrapper grey'>\n            <div className='selected-summary-right-item'>Precipitation: {props.precipitation}%</div>\n            <div className='selected-summary-right-item'>Humidity: {props.humidity}%</div>\n            <div className='selected-summary-right-item'>Wind: {props.windSpeed}</div>\n        </div>\n    )\n}\nexport default class SelectedSummary extends Component {\n    render() {\n        const temperatureF = this.props.selectedDataObj.temperature === undefined ? this.props.selectedDataObj.temperatureHigh : this.props.selectedDataObj.temperature;\n        let temperature = this.props.isCelsius ? this.props.fToC(temperatureF) : temperatureF;\n        temperature = Math.round(temperature);\n        //\n        const precipitation = Math.round(this.props.selectedDataObj.precipProbability * 100);\n        //\n        const humidity = Math.round(this.props.selectedDataObj.humidity * 100);\n        //\n        const mph = this.props.selectedDataObj.windSpeed;\n        const windSpeed = this.props.isCelsius ? Math.round(this.props.mphToKmh(mph)) + ' km/h': Math.round(mph) + ' mph';\n\n        return (\n            <div className='selected-summary-wrapper quarter-height-wrapper'>\n                <SelectedSummaryLeft icon={this.props.selectedDataObj.icon} temperature={temperature} unitSwitcher={this.props.unitSwitcher} isCelsius={this.props.isCelsius}/>\n                <SelectedSummaryRight precipitation={precipitation} humidity={humidity} windSpeed={windSpeed}/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './loading.css';\nimport '../App.css';\n\nexport default class Loading extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isTimeout: false\n        };\n        this.timeout = null;\n        this.showTimeoutMessage = this.showTimeoutMessage.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n    refresh() {\n        if (!this.state.isTimeout) return;\n        window.location.reload()\n    }\n    showTimeoutMessage() {\n        this.setState({\n            isTimeout: true\n        })\n    }\n    componentDidMount() {\n        this.timeout = setTimeout(this.showTimeoutMessage, 5000)\n    }\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n    render() {\n        const text = 'loading...';\n        const spanArray = [];\n        for (let i=0; i<text.length; i++) {\n            const style = {\n                animationDelay: i*0.2+'s'\n            };\n            const span = <span key={'loading'+i} className='loading-span' style={style}>{text.charAt(i)}</span>;\n            spanArray.push(span)\n        }\n\n        const timeoutWrapper = this.state.isTimeout ? 'loading-timeout-active' : 'loading-timeout-inactive';\n        return (\n            <div className='loading-wrapper grey'>\n                <div className={timeoutWrapper}>\n                    <div className='loading-timeout-message'>This app relies on free tiers of the weather and geocoding API services, the responses can be slow sometimes.</div>\n                </div>\n                <div className='loading-text-wrapper grey'>\n                    { spanArray }\n                </div>\n                <div className={timeoutWrapper}>\n                    <div className='loading-refresher' onClick={this.refresh}>refresh?</div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport DayChart from './components/day-chart';\nimport HourChart from './components/hour-chart';\nimport SelectedSummary from \"./components/selected-summary\";\nimport Loading from './components/loading';\nimport withWeatherQuery from './utilities/weather-query';\n\nclass AppLoaded extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDataObj: this.props.weatherData.currently,\n            isDaySummary: false,\n            isCelsius: true,\n            hourChartOffset: /*day*/0\n        };\n        this.unitSwitcher = this.unitSwitcher.bind(this);\n        this.setSelectedDataObj = this.setSelectedDataObj.bind(this);\n        this.setIsDaySummary = this.setIsDaySummary.bind(this);\n        this.setHourChartOffset = this.setHourChartOffset.bind(this);\n    }\n    getDisplayTime(timeStamp, isDayOnly) {\n        const dateObj = new Date(timeStamp * 1000);\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const dayOnly = days[dateObj.getDay()];\n        const hours = dateObj.getHours() < 10 ? '0' + dateObj.getHours() : dateObj.getHours();\n        const minutes = dateObj.getMinutes() < 10 ? '0' + dateObj.getMinutes() : dateObj.getMinutes();\n        const full = dayOnly + ' ' + hours + ':' + minutes;\n        return isDayOnly ? dayOnly : full\n    }\n    fToC(f) {\n        return ((f - 32) * 5/9);\n    }\n    mphToKmh(mph) {\n        return (mph / 1.609);\n    }\n    unitSwitcher(isCelsiusNow) {\n        this.setState({isCelsius: !isCelsiusNow})\n    }\n    setSelectedDataObj(obj) {\n        this.setState({\n            selectedDataObj: obj\n        })\n    }\n    setIsDaySummary(trueOrFalse) {\n        this.setState({isDaySummary: trueOrFalse})\n    }\n    setHourChartOffset(day) {\n        this.setState({hourChartOffset: day})\n    }\n    render() {\n        const states = {\n            isDaySummary: this.state.isDaySummary,\n            isCelsius: this.state.isCelsius\n        };\n        const data = {\n            geoData: this.props.geoData,\n            weatherData: this.props.weatherData,\n            selectedDataObj: this.state.selectedDataObj,\n        };\n        const tools = {\n            getDisplayTime: this.getDisplayTime,\n            fToC: this.fToC,\n            mphToKmh: this.mphToKmh,\n            unitSwitcher: this.unitSwitcher,\n            setSelectedDataObj: this.setSelectedDataObj\n        };\n        const injectProps = {...states, ...data, ...tools};\n        return (\n            <React.Fragment>\n                <Header {...injectProps}/>\n                <SelectedSummary {...injectProps}/>\n                <HourChart\n                    objArray={this.props.weatherData.hourly.data}\n                    selectedDataObj={this.state.selectedDataObj}\n                    isCelsius={this.state.isCelsius}\n                    fToC={this.fToC}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    hourChartOffset={this.state.hourChartOffset}\n                />\n\n                <DayChart\n                    objArray={this.props.weatherData.daily.data}\n                    fToC={this.fToC}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    isCelsius={this.state.isCelsius}\n                    setHourChartOffset={this.setHourChartOffset}\n                />\n            </React.Fragment>\n        )\n    }\n}\nfunction Attributions(props) {\n    return (\n        <div className='attributions-wrapper grey'>\n            <a href='https://darksky.net/poweredby/' target='_blank' rel='noopener noreferrer'>Powered by Dark Sky</a>\n            <a href='https://locationiq.com/' target='_blank' rel='noopener noreferrer'>Search by LocationIQ.com</a>\n            <a href='https://erikflowers.github.io/weather-icons/' target='_blank' rel='noopener noreferrer'>The Weather Icons</a>\n        </div>\n    )\n}\nclass App extends Component {\n    render() {\n        return (\n            <div className='app-wrapper'>\n                <div className='app-safe-area'>\n                { this.props.isFailed ? this.props.errorMessage\n                    : this.props.isLoaded ? <AppLoaded {...this.props} /> : <Loading />\n                }\n                </div>\n                <Attributions />\n            </div>\n        )\n    }\n}\n\nconst WithWeatherQueryApp = withWeatherQuery(App);\nexport default WithWeatherQueryApp;\n","import React, { Component } from 'react';\n\nexport default function withWeatherQuery(WrappedComponent) {\n    return class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isLoaded: false,\n                isFailed: false\n            };\n            this.latitude = null;\n            this.longitude = null;\n            this.weatherData = null;\n            this.geoData = null;\n            this.errorMessage = '';\n            this.sendQuery = this.sendQuery.bind(this);\n            this.useMockLoacation = this.useMockLoacation.bind(this);\n            this.getGeoLocation = this.getGeoLocation.bind(this);\n        }\n\n        sendQuery() {\n            let isWeatherReady = false;\n            let isGeocodingReady = false;\n            const origin = 'https://www.xiaoxihome.com/';\n            // const origin = 'http://localhost:5000/';\n\n            const fetchOptions = {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'default',\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                redirect: 'follow',\n                referrer: 'client',\n                body: JSON.stringify({\n                    latitude: this.latitude,\n                    longitude: this.longitude\n                })\n            };\n\n            fetch(origin + 'api/weather', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        this.weatherData = json.data;\n                        console.log(json.data);\n                        isWeatherReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e));\n\n            fetch(origin + 'api/reversegeocoding', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        this.geoData = json.data;\n                        console.log(json.data);\n                        isGeocodingReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e))\n        }\n        useMockLoacation() {\n            // in case of geolocation no available or denied\n            this.latitude = 43.70011;\n            this.longitude = -79.4163;\n            this.sendQuery()\n        }\n        getGeoLocation() {\n            if (\"geolocation\" in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.latitude = position.coords.latitude;\n                    this.longitude = position.coords.longitude;\n                    this.sendQuery()\n                }, this.useMockLoacation);\n            } else {\n                this.useMockLoacation();\n            }\n        }\n        componentDidMount() {\n            this.getGeoLocation()\n        }\n        render() {\n            const injectProps = {\n                isLoaded: this.state.isLoaded,\n                weatherData: this.weatherData,\n                geoData: this.geoData,\n                isFailed: this.state.isFailed,\n                errorMessage: this.errorMessage\n            };\n            return (\n                <WrappedComponent {...this.props} {...injectProps}/>\n            )\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WithWeatherQueryApp from './App';\n\nfunction Index(props) {\n    return (\n        <div className='index-wrapper'>\n            <WithWeatherQueryApp />\n        </div>\n    )\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n"],"sourceRoot":""}