{"version":3,"sources":["components/header.js","components/icon.js","components/day-chart.js","components/svg-charts/common.js","components/svg-charts/temperature.js","components/svg-charts/precipitation.js","components/svg-charts/wind.js","components/hour-chart.js","components/selected-summary.js","components/loading.js","App.js","utilities/weather-query.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","geoData","getDisplayTime","selectedDataObj","time","isDaySummary","summary","Component","Icon","filename","indexOf","icon","src","process","alt","React","Daily","onClick","setSelectedDataObj","obj","setIsDaySummary","setHourChartOffset","dayIndex","icon_Icon","temperatureHigh","temperatureLow","DayChart","dayName","temp","undefined","result","isCelsius","fToC","Math","round","_this2","objArray","map","index","key","Date","getDay","getTemperature","UpperTextInChart","tempTextInactive","fill","fontSize","chartFontSize","fontWeight","cursor","tempTextStyleActive","style","x","y","text","NoData","textTransform","Fragment","i","wrapperWidth","noDataCenterOffset","svgHeight","textAnchor","HourChartTemperature","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isReady","tempMax","tempMin","svgWidth","tempArray","xInterval","topTextArea","bottomTextArea","lowestTemperatureHeight","temperature","usableHeightForChart","chartTop","tempText","chartBot","timeText","hasOwnProperty","tempArraySorted","slice","sort","b","length","setState","svgOffset","lineStyle","stroke","strokeWidth","fillStyle","timeTextStyle","lines","lastObj","last","getCoordinateY","that","lastX","thatX","temperatureF","hour","getHours","x1","y1","x2","y2","points","concat","firstDayOffset","hourChartOffset","svg","height","width","transform","HourChartPrecipitation","precipProbability","precipitation","HourChartWind","windSpeedMph","windSpeed","scale","min","max","mphToKmh","rotation","windBearing","arrowWidth","floor","arrowHeight","arrowX","arrowY","viewBox","d","HourChartSwitcherButton","wrapperCSS","mode","type","setMode","HourChartSwitcher","HourChart","bind","assertThisInitialized","wrapperRef","createRef","wrapperStyle","window","getComputedStyle","current","parseInt","getPropertyValue","innerWidth","chartProps","ref","temperature_HourChartTemperature","assign","precipitation_HourChartPrecipitation","wind_HourChartWind","UnitSwitcher","unitSwitcher","SelectedSummaryLeft","SelectedSummaryRight","humidity","SelectedSummary","mph","Loading","isTimeout","timeout","showTimeoutMessage","refresh","location","reload","setTimeout","clearTimeout","spanArray","animationDelay","span","charAt","push","timeoutWrapper","AppLoaded","weatherData","currently","timeStamp","isDayOnly","dateObj","dayOnly","hours","minutes","getMinutes","f","isCelsiusNow","trueOrFalse","day","states","data","tools","injectProps","objectSpread","header_Header","selected_summary_SelectedSummary","hour_chart_HourChart","hourly","day_chart_DayChart","daily","Attributions","href","target","rel","WrappedComponent","App","isFailed","errorMessage","isLoaded","App_AppLoaded","loading_Loading","WithWeatherQueryApp","_Component","_class","latitude","longitude","sendQuery","useMockLocation","getGeoLocation","inherits","createClass","value","isWeatherReady","isGeocodingReady","origin","fetchOptions","method","cache","credentials","headers","content-type","redirect","referrer","body","JSON","stringify","fetch","then","res","json","status","console","log","catch","e","_this3","navigator","geolocation","getCurrentPosition","position","coords","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.532a6d67.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.css';\nimport '../App.css';\n\nexport default class Header extends Component {\n    render() {\n\n        return (\n            <div className='header-wrapper grey'>\n                <h1> { this.props.geoData } </h1>\n                <h2> { this.props.getDisplayTime(this.props.selectedDataObj.time, this.props.isDaySummary) } </h2>\n                <h2> { this.props.selectedDataObj.summary } </h2>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Icon extends React.Component {\n    render() {\n        const availableIcons = ['clear-day', 'clear-night', 'rain', 'snow', 'sleet', 'wind', 'fog', 'cloudy', 'partly-cloudy-day', 'partly-cloudy-night'];\n        const filename = availableIcons.indexOf(this.props.icon) === -1 ? 'na.svg' : this.props.icon + '.svg';\n        return (\n            <img src={process.env.PUBLIC_URL + '/svg/' + filename} className={this.props.className} alt={this.props.icon} />\n        )\n    }\n};","import React, { Component } from 'react';\nimport './day-chart.css';\nimport '../App.css';\nimport Icon from './icon';\n\nfunction Daily(props) {\n    return (\n        <div\n            className='daily-wrapper'\n            onClick={()=>{\n                props.setSelectedDataObj(props.obj);\n                props.setIsDaySummary(true);\n                props.setHourChartOffset(props.dayIndex)\n            }}\n        >\n            { props.time }\n            <Icon className='daily-icon' icon={props.icon}/>\n            <div className='daily-temp'>\n                <span className='daily-temp-high'>{ props.temperatureHigh }&#176;</span>\n                <span className='daily-temp-low'>{ props.temperatureLow }&#176;</span>\n            </div>\n        </div>\n    )\n}\n\nexport default class DayChart extends Component {\n\n    dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n    getTemperature(temp) {\n      if (temp === undefined) {\n        return '?'\n      }\n      const result = this.props.isCelsius ? this.props.fToC(temp) : temp;\n      return Math.round(result);\n    }\n\n    render() {\n\n        return (\n            <div className='daychart-wrapper'>\n                { this.props.objArray.map((obj, index) => {\n                    return (\n                        <Daily\n                            key={obj.time}\n                            icon={obj.icon}\n                            time={this.dayName[(new Date(obj.time * 1000)).getDay()]}\n                            temperatureHigh={this.getTemperature(obj.temperatureHigh)}\n                            temperatureLow={this.getTemperature(obj.temperatureLow)}\n                            obj={obj}\n                            setSelectedDataObj={this.props.setSelectedDataObj}\n                            setIsDaySummary={this.props.setIsDaySummary}\n                            setHourChartOffset={this.props.setHourChartOffset}\n                            dayIndex={index}\n                        />\n                        )\n                }) }\n            </div>\n        )\n    }\n}\n","import React from \"react\";\n\nfunction UpperTextInChart(props) {\n    const tempTextInactive = {\n        fill: 'rgb(150, 150, 150)',\n        fontSize: props.chartFontSize + 'px',\n        fontWeight: 700,\n        cursor: 'pointer',\n    };\n    const tempTextStyleActive = {\n        fill: 'rgb(0, 0, 0)',\n        fontSize: props.chartFontSize + 'px',\n        fontWeight: 700\n    };\n    const style = props.obj.time === props.selectedDataObj.time ? tempTextStyleActive : tempTextInactive;\n    return (\n        <text\n            x={props.x}\n            y={props.y}\n            style={style}\n            onClick={() => {\n                props.setSelectedDataObj(props.obj);\n                props.setIsDaySummary(false)\n            }}\n        >{ props.text }</text>\n    )\n}\nfunction NoData(props) {\n    const style = {\n        fill: 'rgba(0, 0, 0, 0.2)',\n        fontSize: props.chartFontSize + 'px',\n        fontWeight: 700,\n        textTransform: 'uppercase',\n    };\n    const array = [2, 3, 4, 5, 6];\n    return (\n        <React.Fragment>\n            {\n                array.map(i =>\n                    <text\n                        key={'nodata'+i}\n                        x={props.wrapperWidth * (i + 0.5) + props.noDataCenterOffset}\n                        y={props.svgHeight * 0.5}\n                        style={style}\n                        textAnchor='middle'\n                    >Hourly forecasts are only available for next 48 hours</text>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nexport {UpperTextInChart, NoData};","import React, {Component} from \"react\";\nimport {UpperTextInChart, NoData} from \"./common\";\n\nexport default class HourChartTemperature extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.tempMax = null;\n        this.tempMin = null;\n        this.wrapperWidth = null;\n        this.svgHeight = null;\n        this.svgWidth = null;\n        this.tempArray = null;\n        this.xInterval = null;\n        this.topTextArea = null;\n        this.bottomTextArea = null;\n        this.lowestTemperatureHeight = null;\n\n    }\n    getCoordinateY(temperature) {\n        // NOT INVERTED UNTIL RIGHT BEFORE RETURN\n        const usableHeightForChart = this.svgHeight - this.topTextArea - this.bottomTextArea - this.lowestTemperatureHeight;\n        const y = ((temperature - this.tempMin) / (this.tempMax - this.tempMin)) * usableHeightForChart;\n        const chartTop = this.bottomTextArea + this.lowestTemperatureHeight + y;\n\n        const result = {\n            tempText: chartTop + 10,\n            chartTop: chartTop,\n            chartBot: this.bottomTextArea,\n            timeText: 5\n        };\n        // invert\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                result[key] = this.svgHeight - result[key];\n            }\n        }\n        return result\n    }\n    componentDidMount() {\n        this.tempArray = this.props.objArray.map(obj => obj.temperature);\n        const tempArraySorted = this.tempArray.slice().sort((a, b) => a - b);\n        this.tempMax = tempArraySorted[tempArraySorted.length - 1];\n        this.tempMin = tempArraySorted[0];\n        //\n        this.wrapperWidth = this.props.wrapperWidth;\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        //\n        this.topTextArea = 20;\n        this.bottomTextArea = 20;\n        this.lowestTemperatureHeight = 10;\n        //\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        const lineStyle = {\n            stroke: 'rgba(249, 166, 2, 0.8)',\n            strokeWidth: 2\n        };\n        const fillStyle = {\n            fill: 'rgba(249, 166, 2, 0.4)'\n        };\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: this.props.chartFontSize + 'px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if (index !== 0) {\n                            const lastObj = this.props.objArray[index - 1];\n                            const last = this.getCoordinateY(lastObj.temperature);\n                            const that = this.getCoordinateY(obj.temperature);\n                            const lastX = (index - 1) * this.xInterval;\n                            const thatX = index * this.xInterval;\n\n                            const temperatureF = lastObj.temperature;\n                            const temperature = this.props.isCelsius ? Math.round(this.props.fToC(temperatureF)) : Math.round(temperatureF);\n                            //\n                            const hour = new Date(lastObj.time * 1000).getHours() + ':00';\n                            //\n                            return (\n                                <React.Fragment key={obj.time}>\n                                    <line  x1={lastX} y1={last.chartTop} x2={thatX} y2={that.chartTop} style={lineStyle} />\n                                    <polygon points={`${lastX},${last.chartBot} ${lastX},${last.chartTop} ${thatX},${that.chartTop} ${thatX},${that.chartBot}`} style={fillStyle} />\n\n                                    {\n                                        (index - 1) % 3 === 0 ?\n                                            <React.Fragment>\n                                                <UpperTextInChart\n                                                    x={lastX}\n                                                    y={last.tempText}\n                                                    text={temperature}\n                                                    obj={lastObj}\n                                                    selectedDataObj={this.props.selectedDataObj}\n                                                    setSelectedDataObj={this.props.setSelectedDataObj}\n                                                    setIsDaySummary={this.props.setIsDaySummary}\n                                                    chartFontSize={this.props.chartFontSize}\n                                                />\n                                                <text x={lastX} y={last.timeText} style={timeTextStyle}>{ hour }</text>\n                                            </React.Fragment>\n                                            : null\n                                    }\n\n\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset} chartFontSize={this.props.chartFontSize}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                { this.state.isReady ? svg : null }\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport {UpperTextInChart, NoData} from \"./common\";\n\nexport default class HourChartPrecipitation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.tempMax = null;\n        this.tempMin = null;\n        this.wrapperWidth = null;\n        this.svgHeight = null;\n        this.svgWidth = null;\n        this.tempArray = null;\n        this.xInterval = null;\n        this.topTextArea = null;\n        this.bottomTextArea = null;\n        this.lowestTemperatureHeight = null;\n\n    }\n    getCoordinateY(temperature) {\n        // NOT INVERTED UNTIL RIGHT BEFORE RETURN\n        const usableHeightForChart = this.svgHeight - this.topTextArea - this.bottomTextArea - this.lowestTemperatureHeight;\n        const y = ((temperature - this.tempMin) / (this.tempMax - this.tempMin)) * usableHeightForChart;\n        const chartTop = this.bottomTextArea + this.lowestTemperatureHeight + y;\n\n        const result = {\n            tempText: chartTop + 10,\n            chartTop: chartTop,\n            chartBot: this.bottomTextArea,\n            timeText: 5\n        };\n        // invert\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                result[key] = this.svgHeight - result[key];\n            }\n        }\n        return result\n    }\n    componentDidMount() {\n        this.tempMax = 1;\n        this.tempMin = 0;\n        //\n        this.wrapperWidth = this.props.wrapperWidth;\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        //\n        this.topTextArea = 20;\n        this.bottomTextArea = 20;\n        this.lowestTemperatureHeight = 0;\n        //\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        const lineStyle = {\n            stroke: 'rgba(29, 161, 242, 0.8)',\n            strokeWidth: 2\n        };\n        const fillStyle = {\n            fill: 'rgba(29, 161, 242, 0.4)'\n        };\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: this.props.chartFontSize+'px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if (index !== 0) {\n                            const lastObj = this.props.objArray[index - 1];\n                            const last = this.getCoordinateY(lastObj.precipProbability);\n                            const that = this.getCoordinateY(obj.precipProbability);\n                            const lastX = (index - 1) * this.xInterval;\n                            const thatX = index * this.xInterval;\n\n                            const precipitation = Math.round(lastObj.precipProbability * 100);\n                            //\n                            const hour = new Date(lastObj.time * 1000).getHours() + ':00';\n                            //\n                            return (\n                                <React.Fragment key={lastObj.time}>\n                                    <line  x1={lastX} y1={last.chartTop} x2={thatX} y2={last.chartTop} style={lineStyle} />\n                                    <polygon points={`${lastX},${last.chartBot} ${lastX},${last.chartTop} ${thatX},${last.chartTop} ${thatX},${that.chartBot}`} style={fillStyle} />\n\n                                    {\n                                        (index - 1) % 3 === 0 ?\n                                            <React.Fragment>\n                                                <UpperTextInChart\n                                                    x={lastX}\n                                                    y={last.tempText}\n                                                    text={precipitation + '%'}\n                                                    obj={lastObj}\n                                                    selectedDataObj={this.props.selectedDataObj}\n                                                    setSelectedDataObj={this.props.setSelectedDataObj}\n                                                    setIsDaySummary={this.props.setIsDaySummary}\n                                                    chartFontSize={this.props.chartFontSize}\n                                                />\n                                                <text x={lastX} y={last.timeText} style={timeTextStyle}>{ hour }</text>\n                                            </React.Fragment>\n                                            : null\n                                    }\n\n\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset} chartFontSize={this.props.chartFontSize}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                { this.state.isReady ? svg : null }\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport {UpperTextInChart, NoData} from \"./common\";\n\nexport default class HourChartWind extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.xInterval = null;\n\n    }\n    componentDidMount() {\n        this.wrapperWidth = this.props.wrapperWidth;\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: this.props.chartFontSize + 'px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if ((index) % 3 === 0) {\n                            const thatX = index * this.xInterval;\n\n                            const windSpeedMph = obj.windSpeed;\n                            const scale = Math.min(Math.max(windSpeedMph / 30, 0.4), 1);\n                            const windSpeed = this.props.isCelsius ? Math.round(this.props.mphToKmh(windSpeedMph)) + ' km/h' : Math.round(windSpeedMph) + ' mph';\n                            const rotation = obj.windBearing === undefined ? 0 : obj.windBearing;\n                            //\n                            const arrowSizeMax = 60;\n                            const arrowWidth = Math.floor(arrowSizeMax * scale);\n                            const arrowHeight = Math.floor(arrowSizeMax * scale);\n                            const arrowX = thatX + 0.5 * this.xInterval * 2 - 0.5 * arrowWidth;\n                            const arrowY = 50 - 0.5 * arrowHeight;\n                            //\n                            const hour = new Date(obj.time * 1000).getHours() + ':00';\n                            return (\n                                <React.Fragment key={obj.time}>\n                                    <g>\n                                        <svg width={arrowWidth} height={arrowHeight} x={arrowX} y={arrowY} viewBox='0 0 30 30'>\n                                            <path d=\"M9.95,10.87c-0.01,0.35,0.1,0.65,0.34,0.9s0.53,0.37,0.89,0.36c0.34,0.02,0.63-0.1,0.88-0.37l1.66-1.64v10.3\n                                            c-0.01,0.35,0.11,0.64,0.36,0.88s0.55,0.35,0.92,0.34c0.34,0.02,0.64-0.09,0.89-0.32s0.39-0.53,0.4-0.88v-10.3l1.64,1.64\n                                            c0.23,0.24,0.53,0.37,0.88,0.37c0.36,0,0.66-0.12,0.9-0.36s0.36-0.53,0.36-0.89c-0.02-0.36-0.15-0.64-0.4-0.85l-3.74-3.84\n                                            c-0.24-0.23-0.55-0.37-0.92-0.4c-0.37,0.02-0.68,0.16-0.92,0.41l-3.75,3.81C10.08,10.25,9.95,10.53,9.95,10.87z\"\n                                                  fill='rgb(150, 150, 150)' transform={`rotate(${rotation} 15 15)`}\n                                            />\n                                        </svg>\n                                    </g>\n                                    <UpperTextInChart\n                                        x={thatX}\n                                        y={10}\n                                        text={windSpeed}\n                                        obj={obj}\n                                        selectedDataObj={this.props.selectedDataObj}\n                                        setSelectedDataObj={this.props.setSelectedDataObj}\n                                        setIsDaySummary={this.props.setIsDaySummary}\n                                        chartFontSize={this.props.chartFontSize}\n                                    />\n                                    <text x={thatX} y={95} style={timeTextStyle}>{ hour }</text>\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} viewBox={`0 0 ${this.svgWidth} ${this.svgHeight}`} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset} chartFontSize={this.props.chartFontSize}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                { this.state.isReady ? svg : null }\n            </React.Fragment>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './hour-chart.css';\nimport HourChartTemperature from './svg-charts/temperature';\nimport HourChartPrecipitation from './svg-charts/precipitation';\nimport HourChartWind from \"./svg-charts/wind\";\n\nfunction HourChartSwitcherButton(props) {\n    const wrapperCSS = props.mode === props.type\n        ? 'hour-chart-switcher-button-active'\n        : 'hour-chart-switcher-button';\n    return (\n        <React.Fragment>\n            <div className={wrapperCSS} onClick={() => props.setMode(props.type)}>{props.type}</div>\n        </React.Fragment>\n    )\n}\nfunction HourChartSwitcher(props) {\n    return (\n        <div className='hour-chart-switcher-wrapper'>\n            {\n                ['temperature' , 'precipitation', 'wind'].map(type => <HourChartSwitcherButton key={type} mode={props.mode} type={type} setMode={props.setMode}/>)\n            }\n        </div>\n    )\n}\nexport default class HourChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'temperature', // temperature, precipitation, wind\n            wrapperWidth: null,\n            fontSize: 12,\n            isReady: false\n        };\n        this.setMode = this.setMode.bind(this);\n        this.wrapperRef = React.createRef();\n    }\n    setMode(mode) {\n        if (this.state.mode !== mode) {\n            this.setState({mode: mode})\n        }\n    }\n    componentDidMount() {\n        const wrapperStyle = window.getComputedStyle(this.wrapperRef.current, null);\n        const wrapperWidth = window.parseInt(wrapperStyle.getPropertyValue(\"width\"));\n        const chartFontSize = window.innerWidth > 500 ? 12 : 8;\n        this.setState({\n            wrapperWidth: wrapperWidth,\n            chartFontSize: chartFontSize,\n            isReady: true\n        })\n    }\n    render() {\n        const chartProps = {\n            wrapperWidth: this.state.wrapperWidth,\n            chartFontSize: this.state.chartFontSize,\n        };\n        return (\n            <div className='hour-chart-wrapper' ref={this.wrapperRef}>\n                <HourChartSwitcher setMode={this.setMode} mode={this.state.mode}/>\n                {\n                    !this.state.isReady\n                        ? null\n                        : this.state.mode === 'temperature'\n                    ? <HourChartTemperature {...chartProps} {...this.props}/>\n                        : this.state.mode === 'precipitation'\n                            ? <HourChartPrecipitation {...chartProps} {...this.props}/>\n                            : <HourChartWind {...chartProps} {...this.props}/>\n\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './selected-summary.css';\nimport '../App.css'\nimport Icon from './icon';\n\nfunction UnitSwitcher(props) {\n    return (\n        <div className='unit-switcher-wrapper'>\n            {/*c*/}\n            <span\n                className={!props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}\n                onClick={() => props.unitSwitcher(false)}>&#176;C</span>\n            <span> | </span>\n            {/*f*/}\n            <span\n                onClick={() => props.unitSwitcher(true)}\n                className={props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}>&#176;F</span>\n        </div>\n    )\n}\nfunction SelectedSummaryLeft(props) {\n    return (\n        <div className='selected-summary-left-wrapper'>\n            <Icon icon={props.icon} className='selected-summary-icon'/>\n            <div className='selected-summary-temperature'> {props.temperature} </div>\n            <UnitSwitcher unitSwitcher={props.unitSwitcher} isCelsius={props.isCelsius}/>\n        </div>\n    )\n}\nfunction SelectedSummaryRight(props) {\n    return (\n        <div className='selected-summary-right-wrapper grey'>\n            <div className='selected-summary-right-item'>Precipitation: {props.precipitation}%</div>\n            <div className='selected-summary-right-item'>Humidity: {props.humidity}%</div>\n            <div className='selected-summary-right-item'>Wind: {props.windSpeed}</div>\n        </div>\n    )\n}\nexport default class SelectedSummary extends Component {\n    render() {\n        const temperatureF = this.props.selectedDataObj.temperature === undefined ? this.props.selectedDataObj.temperatureHigh : this.props.selectedDataObj.temperature;\n        let temperature = this.props.isCelsius ? this.props.fToC(temperatureF) : temperatureF;\n        temperature = Math.round(temperature);\n        //\n        const precipitation = Math.round(this.props.selectedDataObj.precipProbability * 100);\n        //\n        const humidity = Math.round(this.props.selectedDataObj.humidity * 100);\n        //\n        const mph = this.props.selectedDataObj.windSpeed;\n        const windSpeed = this.props.isCelsius ? Math.round(this.props.mphToKmh(mph)) + ' km/h': Math.round(mph) + ' mph';\n\n        return (\n            <div className='selected-summary-wrapper'>\n                <SelectedSummaryLeft icon={this.props.selectedDataObj.icon} temperature={temperature} unitSwitcher={this.props.unitSwitcher} isCelsius={this.props.isCelsius}/>\n                <SelectedSummaryRight precipitation={precipitation} humidity={humidity} windSpeed={windSpeed}/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './loading.css';\nimport '../App.css';\n\nexport default class Loading extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isTimeout: false\n        };\n        this.timeout = null;\n        this.showTimeoutMessage = this.showTimeoutMessage.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n    refresh() {\n        if (!this.state.isTimeout) return;\n        window.location.reload()\n    }\n    showTimeoutMessage() {\n        this.setState({\n            isTimeout: true\n        })\n    }\n    componentDidMount() {\n        this.timeout = setTimeout(this.showTimeoutMessage, 5000)\n    }\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n    render() {\n        const text = 'loading...';\n        const spanArray = [];\n        for (let i=0; i<text.length; i++) {\n            const style = {\n                animationDelay: i*0.2+'s'\n            };\n            const span = <span key={'loading'+i} className='loading-span' style={style}>{text.charAt(i)}</span>;\n            spanArray.push(span)\n        }\n\n        const timeoutWrapper = this.state.isTimeout ? 'loading-timeout-active' : 'loading-timeout-inactive';\n        return (\n            <div className='loading-wrapper grey'>\n                <div className={timeoutWrapper}>\n                    <div className='loading-timeout-message'>Looking up geolocation can be slow sometimes</div>\n                </div>\n                <div className='loading-text-wrapper grey'>\n                    { spanArray }\n                </div>\n                <div className={timeoutWrapper}>\n                    <div className='loading-refresher' onClick={this.refresh}>refresh?</div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport DayChart from './components/day-chart';\nimport HourChart from './components/hour-chart';\nimport SelectedSummary from \"./components/selected-summary\";\nimport Loading from './components/loading';\nimport withWeatherQuery from './utilities/weather-query';\n\nclass AppLoaded extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDataObj: this.props.weatherData.currently,\n            isDaySummary: false,\n            isCelsius: true,\n            hourChartOffset: /*day*/0\n        };\n        this.unitSwitcher = this.unitSwitcher.bind(this);\n        this.setSelectedDataObj = this.setSelectedDataObj.bind(this);\n        this.setIsDaySummary = this.setIsDaySummary.bind(this);\n        this.setHourChartOffset = this.setHourChartOffset.bind(this);\n    }\n    getDisplayTime(timeStamp, isDayOnly) {\n        const dateObj = new Date(timeStamp * 1000);\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const dayOnly = days[dateObj.getDay()];\n        const hours = dateObj.getHours() < 10 ? '0' + dateObj.getHours() : dateObj.getHours();\n        const minutes = dateObj.getMinutes() < 10 ? '0' + dateObj.getMinutes() : dateObj.getMinutes();\n        const full = dayOnly + ' ' + hours + ':' + minutes;\n        return isDayOnly ? dayOnly : full\n    }\n    fToC(f) {\n        return ((f - 32) * 5/9);\n    }\n    mphToKmh(mph) {\n        return (mph / 1.609);\n    }\n    unitSwitcher(isCelsiusNow) {\n        this.setState({isCelsius: !isCelsiusNow})\n    }\n    setSelectedDataObj(obj) {\n        this.setState({\n            selectedDataObj: obj\n        })\n    }\n    setIsDaySummary(trueOrFalse) {\n        this.setState({isDaySummary: trueOrFalse})\n    }\n    setHourChartOffset(day) {\n        this.setState({hourChartOffset: day})\n    }\n    render() {\n        const states = {\n            isDaySummary: this.state.isDaySummary,\n            isCelsius: this.state.isCelsius\n        };\n        const data = {\n            geoData: this.props.geoData,\n            weatherData: this.props.weatherData,\n            selectedDataObj: this.state.selectedDataObj,\n        };\n        const tools = {\n            getDisplayTime: this.getDisplayTime,\n            fToC: this.fToC,\n            mphToKmh: this.mphToKmh,\n            unitSwitcher: this.unitSwitcher,\n            setSelectedDataObj: this.setSelectedDataObj\n        };\n        const injectProps = {...states, ...data, ...tools};\n        return (\n            <React.Fragment>\n                <Header {...injectProps}/>\n                <SelectedSummary {...injectProps}/>\n                <HourChart\n                    objArray={this.props.weatherData.hourly.data}\n                    selectedDataObj={this.state.selectedDataObj}\n                    isCelsius={this.state.isCelsius}\n                    fToC={this.fToC}\n                    mphToKmh={this.mphToKmh}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    hourChartOffset={this.state.hourChartOffset}\n                />\n\n                <DayChart\n                    objArray={this.props.weatherData.daily.data}\n                    fToC={this.fToC}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    isCelsius={this.state.isCelsius}\n                    setHourChartOffset={this.setHourChartOffset}\n                />\n            </React.Fragment>\n        )\n    }\n}\nfunction Attributions(props) {\n    return (\n        <div className='attributions-wrapper grey'>\n            <a href='https://darksky.net/poweredby/' target='_blank' rel='noopener noreferrer'>Weather data powered by Dark Sky</a>\n            <a href='https://locationiq.com/' target='_blank' rel='noopener noreferrer'>Location data searched by LocationIQ.com</a>\n            <a href='https://erikflowers.github.io/weather-icons/' target='_blank' rel='noopener noreferrer'>Icons by The Weather Icons</a>\n            <a href='https://www.xiaoxihome.com' target='_blank' rel='noopener noreferrer'>Xiaoxihome</a>\n        </div>\n    )\n}\nclass App extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className='app-wrapper'>\n                    <div className='app-safe-area'>\n                    { this.props.isFailed ? this.props.errorMessage\n                        : this.props.isLoaded ? <AppLoaded {...this.props} /> : <Loading />\n                    }\n                    </div>\n                </div>\n                <Attributions />\n            </React.Fragment>\n        )\n    }\n}\n\nconst WithWeatherQueryApp = withWeatherQuery(App);\nexport default WithWeatherQueryApp;\n","import React, { Component } from 'react';\n\nexport default function withWeatherQuery(WrappedComponent) {\n    return class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isLoaded: false,\n                isFailed: false\n            };\n            this.latitude = null;\n            this.longitude = null;\n            this.weatherData = null;\n            this.geoData = null;\n            this.errorMessage = '';\n            this.sendQuery = this.sendQuery.bind(this);\n            this.useMockLocation = this.useMockLocation.bind(this);\n            this.getGeoLocation = this.getGeoLocation.bind(this);\n        }\n\n        sendQuery() {\n            let isWeatherReady = false;\n            let isGeocodingReady = false;\n            const origin = 'https://www.xiaoxihome.com/';\n            // const origin = 'http://localhost:5000/';\n\n            const fetchOptions = {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'default',\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                redirect: 'follow',\n                referrer: 'client',\n                body: JSON.stringify({\n                    latitude: this.latitude,\n                    longitude: this.longitude\n                })\n            };\n            fetch(origin + 'api/weather', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        console.log(json.data);\n                        this.weatherData = json.data;\n                        isWeatherReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e));\n\n            fetch(origin + 'api/reversegeocoding', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        console.log(json.data);\n                        this.geoData = json.data;\n                        isGeocodingReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e))\n        }\n        useMockLocation() {\n            // in case of geolocation no available or denied\n            this.latitude = 43.70011;\n            this.longitude = -79.4163;\n            this.sendQuery()\n        }\n        getGeoLocation() {\n            if (\"geolocation\" in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.latitude = position.coords.latitude;\n                    this.longitude = position.coords.longitude;\n                    this.sendQuery()\n                }, this.useMockLocation);\n            } else {\n                this.useMockLocation();\n            }\n        }\n        componentDidMount() {\n            this.getGeoLocation()\n        }\n        render() {\n            const injectProps = {\n                isLoaded: this.state.isLoaded,\n                weatherData: this.weatherData,\n                geoData: this.geoData,\n                isFailed: this.state.isFailed,\n                errorMessage: this.errorMessage\n            };\n            return (\n                <WrappedComponent {...this.props} {...injectProps}/>\n            )\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WithWeatherQueryApp from './App';\n\nfunction Index(props) {\n    return (\n        <div className='index-wrapper'>\n            <WithWeatherQueryApp />\n        </div>\n    )\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n"],"sourceRoot":""}