{"version":3,"sources":["components/header.js","components/icon.js","components/day-chart.js","components/svg-charts/common.js","components/svg-charts/temperature.js","components/svg-charts/precipitation.js","components/svg-charts/wind.js","components/hour-chart.js","components/selected-summary.js","components/loading.js","App.js","utilities/weather-query.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","geoData","getDisplayTime","selectedDataObj","time","isDaySummary","summary","Component","Icon","filename","indexOf","icon","src","process","alt","React","Daily","onClick","setSelectedDataObj","obj","setIsDaySummary","setHourChartOffset","dayIndex","icon_Icon","temperatureHigh","temperatureLow","DayChart","_this","dayName","objArray","map","index","isCelsius","Math","round","fToC","key","Date","getDay","UpperTextInChart","tempTextInactive","fill","fontSize","chartFontSize","fontWeight","cursor","tempTextStyleActive","style","x","y","text","NoData","textTransform","Fragment","i","wrapperWidth","noDataCenterOffset","svgHeight","textAnchor","HourChartTemperature","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isReady","tempMax","tempMin","svgWidth","tempArray","xInterval","topTextArea","bottomTextArea","lowestTemperatureHeight","temperature","usableHeightForChart","chartTop","result","tempText","chartBot","timeText","hasOwnProperty","tempArraySorted","slice","sort","b","length","setState","svgOffset","_this2","lineStyle","stroke","strokeWidth","fillStyle","timeTextStyle","lines","lastObj","last","getCoordinateY","that","lastX","thatX","temperatureF","hour","getHours","x1","y1","x2","y2","points","concat","firstDayOffset","hourChartOffset","svg","height","width","transform","HourChartPrecipitation","precipProbability","precipitation","HourChartWind","windSpeedMph","windSpeed","scale","min","max","mphToKmh","rotation","undefined","windBearing","arrowWidth","floor","arrowHeight","arrowX","arrowY","viewBox","d","HourChartSwitcherButton","wrapperCSS","mode","type","setMode","HourChartSwitcher","HourChart","bind","assertThisInitialized","wrapperRef","createRef","wrapperStyle","window","getComputedStyle","current","parseInt","getPropertyValue","innerWidth","chartProps","ref","temperature_HourChartTemperature","assign","precipitation_HourChartPrecipitation","wind_HourChartWind","UnitSwitcher","unitSwitcher","SelectedSummaryLeft","SelectedSummaryRight","humidity","SelectedSummary","mph","Loading","isTimeout","timeout","showTimeoutMessage","refresh","location","reload","setTimeout","clearTimeout","spanArray","animationDelay","span","charAt","push","timeoutWrapper","AppLoaded","weatherData","currently","timeStamp","isDayOnly","dateObj","dayOnly","hours","minutes","getMinutes","f","isCelsiusNow","trueOrFalse","day","states","data","tools","injectProps","objectSpread","header_Header","selected_summary_SelectedSummary","hour_chart_HourChart","hourly","day_chart_DayChart","daily","Attributions","href","target","rel","WrappedComponent","App","isFailed","errorMessage","isLoaded","App_AppLoaded","loading_Loading","WithWeatherQueryApp","_Component","_class","latitude","longitude","sendQuery","useMockLocation","getGeoLocation","inherits","createClass","value","isWeatherReady","isGeocodingReady","origin","fetchOptions","method","cache","credentials","headers","content-type","redirect","referrer","body","JSON","stringify","console","log","fetch","then","res","json","status","catch","e","_this3","navigator","geolocation","getCurrentPosition","position","coords","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2fa67016.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.css';\nimport '../App.css';\n\nexport default class Header extends Component {\n    render() {\n\n        return (\n            <div className='header-wrapper grey'>\n                <h1> { this.props.geoData } </h1>\n                <h2> { this.props.getDisplayTime(this.props.selectedDataObj.time, this.props.isDaySummary) } </h2>\n                <h2> { this.props.selectedDataObj.summary } </h2>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Icon extends React.Component {\n    render() {\n        const availableIcons = ['clear-day', 'clear-night', 'rain', 'snow', 'sleet', 'wind', 'fog', 'cloudy', 'partly-cloudy-day', 'partly-cloudy-night'];\n        const filename = availableIcons.indexOf(this.props.icon) === -1 ? 'na.svg' : this.props.icon + '.svg';\n        return (\n            <img src={process.env.PUBLIC_URL + '/svg/' + filename} className={this.props.className} alt={this.props.icon} />\n        )\n    }\n};","import React, { Component } from 'react';\nimport './day-chart.css';\nimport '../App.css';\nimport Icon from './icon';\n\nfunction Daily(props) {\n    return (\n        <div\n            className='daily-wrapper'\n            onClick={()=>{\n                props.setSelectedDataObj(props.obj);\n                props.setIsDaySummary(true);\n                props.setHourChartOffset(props.dayIndex)\n            }}\n        >\n            { props.time }\n            <Icon className='daily-icon' icon={props.icon}/>\n            <div className='daily-temp'>\n                <span className='daily-temp-high'>{ props.temperatureHigh }&#176;</span>\n                <span className='daily-temp-low'>{ props.temperatureLow }&#176;</span>\n            </div>\n        </div>\n    )\n}\n\nexport default class DayChart extends Component {\n    render() {\n        const dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n        return (\n            <div className='daychart-wrapper'>\n                { this.props.objArray.map((obj, index) => {\n                    const temperatureHigh = this.props.isCelsius ? Math.round(this.props.fToC(obj.temperatureHigh)) : Math.round(obj.temperatureHigh);\n                    const temperatureLow = this.props.isCelsius ? Math.round(this.props.fToC(obj.temperatureLow)) : Math.round(obj.temperatureLow);\n                    return (\n                        <Daily\n                            key={obj.time}\n                            icon={obj.icon}\n                            time={dayName[(new Date(obj.time * 1000)).getDay()]}\n                            temperatureHigh={temperatureHigh}\n                            temperatureLow={temperatureLow}\n                            obj={obj}\n                            setSelectedDataObj={this.props.setSelectedDataObj}\n                            setIsDaySummary={this.props.setIsDaySummary}\n                            setHourChartOffset={this.props.setHourChartOffset}\n                            dayIndex={index}\n                        />\n                        )\n                }) }\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nfunction UpperTextInChart(props) {\n    const tempTextInactive = {\n        fill: 'rgb(150, 150, 150)',\n        fontSize: props.chartFontSize + 'px',\n        fontWeight: 700,\n        cursor: 'pointer',\n    };\n    const tempTextStyleActive = {\n        fill: 'rgb(0, 0, 0)',\n        fontSize: props.chartFontSize + 'px',\n        fontWeight: 700\n    };\n    const style = props.obj.time === props.selectedDataObj.time ? tempTextStyleActive : tempTextInactive;\n    return (\n        <text\n            x={props.x}\n            y={props.y}\n            style={style}\n            onClick={() => {\n                props.setSelectedDataObj(props.obj);\n                props.setIsDaySummary(false)\n            }}\n        >{ props.text }</text>\n    )\n}\nfunction NoData(props) {\n    const style = {\n        fill: 'rgba(0, 0, 0, 0.2)',\n        fontSize: props.chartFontSize + 'px',\n        fontWeight: 700,\n        textTransform: 'uppercase',\n    };\n    const array = [2, 3, 4, 5, 6];\n    return (\n        <React.Fragment>\n            {\n                array.map(i =>\n                    <text\n                        key={'nodata'+i}\n                        x={props.wrapperWidth * (i + 0.5) + props.noDataCenterOffset}\n                        y={props.svgHeight * 0.5}\n                        style={style}\n                        textAnchor='middle'\n                    >Hourly forecasts are only available for next 48 hours</text>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nexport {UpperTextInChart, NoData};","import React, {Component} from \"react\";\nimport {UpperTextInChart, NoData} from \"./common\";\n\nexport default class HourChartTemperature extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.tempMax = null;\n        this.tempMin = null;\n        this.wrapperWidth = null;\n        this.svgHeight = null;\n        this.svgWidth = null;\n        this.tempArray = null;\n        this.xInterval = null;\n        this.topTextArea = null;\n        this.bottomTextArea = null;\n        this.lowestTemperatureHeight = null;\n\n    }\n    getCoordinateY(temperature) {\n        // NOT INVERTED UNTIL RIGHT BEFORE RETURN\n        const usableHeightForChart = this.svgHeight - this.topTextArea - this.bottomTextArea - this.lowestTemperatureHeight;\n        const y = ((temperature - this.tempMin) / (this.tempMax - this.tempMin)) * usableHeightForChart;\n        const chartTop = this.bottomTextArea + this.lowestTemperatureHeight + y;\n\n        const result = {\n            tempText: chartTop + 10,\n            chartTop: chartTop,\n            chartBot: this.bottomTextArea,\n            timeText: 5\n        };\n        // invert\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                result[key] = this.svgHeight - result[key];\n            }\n        }\n        return result\n    }\n    componentDidMount() {\n        this.tempArray = this.props.objArray.map(obj => obj.temperature);\n        const tempArraySorted = this.tempArray.slice().sort((a, b) => a - b);\n        this.tempMax = tempArraySorted[tempArraySorted.length - 1];\n        this.tempMin = tempArraySorted[0];\n        //\n        this.wrapperWidth = this.props.wrapperWidth;\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        //\n        this.topTextArea = 20;\n        this.bottomTextArea = 20;\n        this.lowestTemperatureHeight = 10;\n        //\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        const lineStyle = {\n            stroke: 'rgba(249, 166, 2, 0.8)',\n            strokeWidth: 2\n        };\n        const fillStyle = {\n            fill: 'rgba(249, 166, 2, 0.4)'\n        };\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: this.props.chartFontSize + 'px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if (index !== 0) {\n                            const lastObj = this.props.objArray[index - 1];\n                            const last = this.getCoordinateY(lastObj.temperature);\n                            const that = this.getCoordinateY(obj.temperature);\n                            const lastX = (index - 1) * this.xInterval;\n                            const thatX = index * this.xInterval;\n\n                            const temperatureF = lastObj.temperature;\n                            const temperature = this.props.isCelsius ? Math.round(this.props.fToC(temperatureF)) : Math.round(temperatureF);\n                            //\n                            const hour = new Date(lastObj.time * 1000).getHours() + ':00';\n                            //\n                            return (\n                                <React.Fragment key={obj.time}>\n                                    <line  x1={lastX} y1={last.chartTop} x2={thatX} y2={that.chartTop} style={lineStyle} />\n                                    <polygon points={`${lastX},${last.chartBot} ${lastX},${last.chartTop} ${thatX},${that.chartTop} ${thatX},${that.chartBot}`} style={fillStyle} />\n\n                                    {\n                                        (index - 1) % 3 === 0 ?\n                                            <React.Fragment>\n                                                <UpperTextInChart\n                                                    x={lastX}\n                                                    y={last.tempText}\n                                                    text={temperature}\n                                                    obj={lastObj}\n                                                    selectedDataObj={this.props.selectedDataObj}\n                                                    setSelectedDataObj={this.props.setSelectedDataObj}\n                                                    setIsDaySummary={this.props.setIsDaySummary}\n                                                    chartFontSize={this.props.chartFontSize}\n                                                />\n                                                <text x={lastX} y={last.timeText} style={timeTextStyle}>{ hour }</text>\n                                            </React.Fragment>\n                                            : null\n                                    }\n\n\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset} chartFontSize={this.props.chartFontSize}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                { this.state.isReady ? svg : null }\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport {UpperTextInChart, NoData} from \"./common\";\n\nexport default class HourChartPrecipitation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.tempMax = null;\n        this.tempMin = null;\n        this.wrapperWidth = null;\n        this.svgHeight = null;\n        this.svgWidth = null;\n        this.tempArray = null;\n        this.xInterval = null;\n        this.topTextArea = null;\n        this.bottomTextArea = null;\n        this.lowestTemperatureHeight = null;\n\n    }\n    getCoordinateY(temperature) {\n        // NOT INVERTED UNTIL RIGHT BEFORE RETURN\n        const usableHeightForChart = this.svgHeight - this.topTextArea - this.bottomTextArea - this.lowestTemperatureHeight;\n        const y = ((temperature - this.tempMin) / (this.tempMax - this.tempMin)) * usableHeightForChart;\n        const chartTop = this.bottomTextArea + this.lowestTemperatureHeight + y;\n\n        const result = {\n            tempText: chartTop + 10,\n            chartTop: chartTop,\n            chartBot: this.bottomTextArea,\n            timeText: 5\n        };\n        // invert\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                result[key] = this.svgHeight - result[key];\n            }\n        }\n        return result\n    }\n    componentDidMount() {\n        this.tempMax = 1;\n        this.tempMin = 0;\n        //\n        this.wrapperWidth = this.props.wrapperWidth;\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        //\n        this.topTextArea = 20;\n        this.bottomTextArea = 20;\n        this.lowestTemperatureHeight = 0;\n        //\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        const lineStyle = {\n            stroke: 'rgba(29, 161, 242, 0.8)',\n            strokeWidth: 2\n        };\n        const fillStyle = {\n            fill: 'rgba(29, 161, 242, 0.4)'\n        };\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: this.props.chartFontSize+'px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if (index !== 0) {\n                            const lastObj = this.props.objArray[index - 1];\n                            const last = this.getCoordinateY(lastObj.precipProbability);\n                            const that = this.getCoordinateY(obj.precipProbability);\n                            const lastX = (index - 1) * this.xInterval;\n                            const thatX = index * this.xInterval;\n\n                            const precipitation = Math.round(lastObj.precipProbability * 100);\n                            //\n                            const hour = new Date(lastObj.time * 1000).getHours() + ':00';\n                            //\n                            return (\n                                <React.Fragment key={lastObj.time}>\n                                    <line  x1={lastX} y1={last.chartTop} x2={thatX} y2={last.chartTop} style={lineStyle} />\n                                    <polygon points={`${lastX},${last.chartBot} ${lastX},${last.chartTop} ${thatX},${last.chartTop} ${thatX},${that.chartBot}`} style={fillStyle} />\n\n                                    {\n                                        (index - 1) % 3 === 0 ?\n                                            <React.Fragment>\n                                                <UpperTextInChart\n                                                    x={lastX}\n                                                    y={last.tempText}\n                                                    text={precipitation + '%'}\n                                                    obj={lastObj}\n                                                    selectedDataObj={this.props.selectedDataObj}\n                                                    setSelectedDataObj={this.props.setSelectedDataObj}\n                                                    setIsDaySummary={this.props.setIsDaySummary}\n                                                    chartFontSize={this.props.chartFontSize}\n                                                />\n                                                <text x={lastX} y={last.timeText} style={timeTextStyle}>{ hour }</text>\n                                            </React.Fragment>\n                                            : null\n                                    }\n\n\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset} chartFontSize={this.props.chartFontSize}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                { this.state.isReady ? svg : null }\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport {UpperTextInChart, NoData} from \"./common\";\n\nexport default class HourChartWind extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.xInterval = null;\n\n    }\n    componentDidMount() {\n        this.wrapperWidth = this.props.wrapperWidth;\n        this.svgWidth = this.wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        this.setState({\n            isReady: true,\n        })\n    }\n    render() {\n        const timeTextStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: this.props.chartFontSize + 'px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if ((index) % 3 === 0) {\n                            const thatX = index * this.xInterval;\n\n                            const windSpeedMph = obj.windSpeed;\n                            const scale = Math.min(Math.max(windSpeedMph / 30, 0.4), 1);\n                            const windSpeed = this.props.isCelsius ? Math.round(this.props.mphToKmh(windSpeedMph)) + ' km/h' : Math.round(windSpeedMph) + ' mph';\n                            const rotation = obj.windBearing === undefined ? 0 : obj.windBearing;\n                            //\n                            const arrowSizeMax = 60;\n                            const arrowWidth = Math.floor(arrowSizeMax * scale);\n                            const arrowHeight = Math.floor(arrowSizeMax * scale);\n                            const arrowX = thatX + 0.5 * this.xInterval * 2 - 0.5 * arrowWidth;\n                            const arrowY = 50 - 0.5 * arrowHeight;\n                            //\n                            const hour = new Date(obj.time * 1000).getHours() + ':00';\n                            return (\n                                <React.Fragment key={obj.time}>\n                                    <g>\n                                        <svg width={arrowWidth} height={arrowHeight} x={arrowX} y={arrowY} viewBox='0 0 30 30'>\n                                            <path d=\"M9.95,10.87c-0.01,0.35,0.1,0.65,0.34,0.9s0.53,0.37,0.89,0.36c0.34,0.02,0.63-0.1,0.88-0.37l1.66-1.64v10.3\n                                            c-0.01,0.35,0.11,0.64,0.36,0.88s0.55,0.35,0.92,0.34c0.34,0.02,0.64-0.09,0.89-0.32s0.39-0.53,0.4-0.88v-10.3l1.64,1.64\n                                            c0.23,0.24,0.53,0.37,0.88,0.37c0.36,0,0.66-0.12,0.9-0.36s0.36-0.53,0.36-0.89c-0.02-0.36-0.15-0.64-0.4-0.85l-3.74-3.84\n                                            c-0.24-0.23-0.55-0.37-0.92-0.4c-0.37,0.02-0.68,0.16-0.92,0.41l-3.75,3.81C10.08,10.25,9.95,10.53,9.95,10.87z\"\n                                                  fill='rgb(150, 150, 150)' transform={`rotate(${rotation} 15 15)`}\n                                            />\n                                        </svg>\n                                    </g>\n                                    <UpperTextInChart\n                                        x={thatX}\n                                        y={10}\n                                        text={windSpeed}\n                                        obj={obj}\n                                        selectedDataObj={this.props.selectedDataObj}\n                                        setSelectedDataObj={this.props.setSelectedDataObj}\n                                        setIsDaySummary={this.props.setIsDaySummary}\n                                        chartFontSize={this.props.chartFontSize}\n                                    />\n                                    <text x={thatX} y={95} style={timeTextStyle}>{ hour }</text>\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        // svg offset\n        let svgOffset;\n        const hourOrigin = new Date(this.props.objArray[0].time * 1000).getHours();\n        const firstDayOffset = 24 - hourOrigin;\n        if (this.props.hourChartOffset === 0) {\n            svgOffset = 0;\n        } else if (this.props.hourChartOffset === 1) {\n            svgOffset = - firstDayOffset * this.xInterval\n        } else {\n            svgOffset = - (firstDayOffset + (this.props.hourChartOffset - 1) * 24) * this.xInterval\n        }\n        //\n        const noDataCenterOffset = firstDayOffset * this.xInterval;\n        //\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth} viewBox={`0 0 ${this.svgWidth} ${this.svgHeight}`} style={{transform: `translateX(${svgOffset}px)`}}>\n                    { lines }\n                    <NoData wrapperWidth={this.wrapperWidth} svgHeight={this.svgHeight} noDataCenterOffset={noDataCenterOffset} chartFontSize={this.props.chartFontSize}/>\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                { this.state.isReady ? svg : null }\n            </React.Fragment>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './hour-chart.css';\nimport HourChartTemperature from './svg-charts/temperature';\nimport HourChartPrecipitation from './svg-charts/precipitation';\nimport HourChartWind from \"./svg-charts/wind\";\n\nfunction HourChartSwitcherButton(props) {\n    const wrapperCSS = props.mode === props.type\n        ? 'hour-chart-switcher-button-active'\n        : 'hour-chart-switcher-button';\n    return (\n        <React.Fragment>\n            <div className={wrapperCSS} onClick={() => props.setMode(props.type)}>{props.type}</div>\n        </React.Fragment>\n    )\n}\nfunction HourChartSwitcher(props) {\n    return (\n        <div className='hour-chart-switcher-wrapper'>\n            {\n                ['temperature' , 'precipitation', 'wind'].map(type => <HourChartSwitcherButton key={type} mode={props.mode} type={type} setMode={props.setMode}/>)\n            }\n        </div>\n    )\n}\nexport default class HourChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'temperature', // temperature, precipitation, wind\n            wrapperWidth: null,\n            fontSize: 12,\n            isReady: false\n        };\n        this.setMode = this.setMode.bind(this);\n        this.wrapperRef = React.createRef();\n    }\n    setMode(mode) {\n        if (this.state.mode !== mode) {\n            this.setState({mode: mode})\n        }\n    }\n    componentDidMount() {\n        const wrapperStyle = window.getComputedStyle(this.wrapperRef.current, null);\n        const wrapperWidth = window.parseInt(wrapperStyle.getPropertyValue(\"width\"));\n        const chartFontSize = window.innerWidth > 500 ? 12 : 8;\n        this.setState({\n            wrapperWidth: wrapperWidth,\n            chartFontSize: chartFontSize,\n            isReady: true\n        })\n    }\n    render() {\n        const chartProps = {\n            wrapperWidth: this.state.wrapperWidth,\n            chartFontSize: this.state.chartFontSize,\n        };\n        return (\n            <div className='hour-chart-wrapper' ref={this.wrapperRef}>\n                <HourChartSwitcher setMode={this.setMode} mode={this.state.mode}/>\n                {\n                    !this.state.isReady\n                        ? null\n                        : this.state.mode === 'temperature'\n                    ? <HourChartTemperature {...chartProps} {...this.props}/>\n                        : this.state.mode === 'precipitation'\n                            ? <HourChartPrecipitation {...chartProps} {...this.props}/>\n                            : <HourChartWind {...chartProps} {...this.props}/>\n\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './selected-summary.css';\nimport '../App.css'\nimport Icon from './icon';\n\nfunction UnitSwitcher(props) {\n    return (\n        <div className='unit-switcher-wrapper'>\n            {/*c*/}\n            <span\n                className={!props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}\n                onClick={() => props.unitSwitcher(false)}>&#176;C</span>\n            <span> | </span>\n            {/*f*/}\n            <span\n                onClick={() => props.unitSwitcher(true)}\n                className={props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}>&#176;F</span>\n        </div>\n    )\n}\nfunction SelectedSummaryLeft(props) {\n    return (\n        <div className='selected-summary-left-wrapper'>\n            <Icon icon={props.icon} className='selected-summary-icon'/>\n            <div className='selected-summary-temperature'> {props.temperature} </div>\n            <UnitSwitcher unitSwitcher={props.unitSwitcher} isCelsius={props.isCelsius}/>\n        </div>\n    )\n}\nfunction SelectedSummaryRight(props) {\n    return (\n        <div className='selected-summary-right-wrapper grey'>\n            <div className='selected-summary-right-item'>Precipitation: {props.precipitation}%</div>\n            <div className='selected-summary-right-item'>Humidity: {props.humidity}%</div>\n            <div className='selected-summary-right-item'>Wind: {props.windSpeed}</div>\n        </div>\n    )\n}\nexport default class SelectedSummary extends Component {\n    render() {\n        const temperatureF = this.props.selectedDataObj.temperature === undefined ? this.props.selectedDataObj.temperatureHigh : this.props.selectedDataObj.temperature;\n        let temperature = this.props.isCelsius ? this.props.fToC(temperatureF) : temperatureF;\n        temperature = Math.round(temperature);\n        //\n        const precipitation = Math.round(this.props.selectedDataObj.precipProbability * 100);\n        //\n        const humidity = Math.round(this.props.selectedDataObj.humidity * 100);\n        //\n        const mph = this.props.selectedDataObj.windSpeed;\n        const windSpeed = this.props.isCelsius ? Math.round(this.props.mphToKmh(mph)) + ' km/h': Math.round(mph) + ' mph';\n\n        return (\n            <div className='selected-summary-wrapper'>\n                <SelectedSummaryLeft icon={this.props.selectedDataObj.icon} temperature={temperature} unitSwitcher={this.props.unitSwitcher} isCelsius={this.props.isCelsius}/>\n                <SelectedSummaryRight precipitation={precipitation} humidity={humidity} windSpeed={windSpeed}/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './loading.css';\nimport '../App.css';\n\nexport default class Loading extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isTimeout: false\n        };\n        this.timeout = null;\n        this.showTimeoutMessage = this.showTimeoutMessage.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n    refresh() {\n        if (!this.state.isTimeout) return;\n        window.location.reload()\n    }\n    showTimeoutMessage() {\n        this.setState({\n            isTimeout: true\n        })\n    }\n    componentDidMount() {\n        this.timeout = setTimeout(this.showTimeoutMessage, 5000)\n    }\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n    render() {\n        const text = 'loading...';\n        const spanArray = [];\n        for (let i=0; i<text.length; i++) {\n            const style = {\n                animationDelay: i*0.2+'s'\n            };\n            const span = <span key={'loading'+i} className='loading-span' style={style}>{text.charAt(i)}</span>;\n            spanArray.push(span)\n        }\n\n        const timeoutWrapper = this.state.isTimeout ? 'loading-timeout-active' : 'loading-timeout-inactive';\n        return (\n            <div className='loading-wrapper grey'>\n                <div className={timeoutWrapper}>\n                    <div className='loading-timeout-message'>This app relies on free tiers of the weather and geocoding API services, the responses can be slow sometimes.</div>\n                </div>\n                <div className='loading-text-wrapper grey'>\n                    { spanArray }\n                </div>\n                <div className={timeoutWrapper}>\n                    <div className='loading-refresher' onClick={this.refresh}>refresh?</div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport DayChart from './components/day-chart';\nimport HourChart from './components/hour-chart';\nimport SelectedSummary from \"./components/selected-summary\";\nimport Loading from './components/loading';\nimport withWeatherQuery from './utilities/weather-query';\n\nclass AppLoaded extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDataObj: this.props.weatherData.currently,\n            isDaySummary: false,\n            isCelsius: true,\n            hourChartOffset: /*day*/0\n        };\n        this.unitSwitcher = this.unitSwitcher.bind(this);\n        this.setSelectedDataObj = this.setSelectedDataObj.bind(this);\n        this.setIsDaySummary = this.setIsDaySummary.bind(this);\n        this.setHourChartOffset = this.setHourChartOffset.bind(this);\n    }\n    getDisplayTime(timeStamp, isDayOnly) {\n        const dateObj = new Date(timeStamp * 1000);\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const dayOnly = days[dateObj.getDay()];\n        const hours = dateObj.getHours() < 10 ? '0' + dateObj.getHours() : dateObj.getHours();\n        const minutes = dateObj.getMinutes() < 10 ? '0' + dateObj.getMinutes() : dateObj.getMinutes();\n        const full = dayOnly + ' ' + hours + ':' + minutes;\n        return isDayOnly ? dayOnly : full\n    }\n    fToC(f) {\n        return ((f - 32) * 5/9);\n    }\n    mphToKmh(mph) {\n        return (mph / 1.609);\n    }\n    unitSwitcher(isCelsiusNow) {\n        this.setState({isCelsius: !isCelsiusNow})\n    }\n    setSelectedDataObj(obj) {\n        this.setState({\n            selectedDataObj: obj\n        })\n    }\n    setIsDaySummary(trueOrFalse) {\n        this.setState({isDaySummary: trueOrFalse})\n    }\n    setHourChartOffset(day) {\n        this.setState({hourChartOffset: day})\n    }\n    render() {\n        const states = {\n            isDaySummary: this.state.isDaySummary,\n            isCelsius: this.state.isCelsius\n        };\n        const data = {\n            geoData: this.props.geoData,\n            weatherData: this.props.weatherData,\n            selectedDataObj: this.state.selectedDataObj,\n        };\n        const tools = {\n            getDisplayTime: this.getDisplayTime,\n            fToC: this.fToC,\n            mphToKmh: this.mphToKmh,\n            unitSwitcher: this.unitSwitcher,\n            setSelectedDataObj: this.setSelectedDataObj\n        };\n        const injectProps = {...states, ...data, ...tools};\n        return (\n            <React.Fragment>\n                <Header {...injectProps}/>\n                <SelectedSummary {...injectProps}/>\n                <HourChart\n                    objArray={this.props.weatherData.hourly.data}\n                    selectedDataObj={this.state.selectedDataObj}\n                    isCelsius={this.state.isCelsius}\n                    fToC={this.fToC}\n                    mphToKmh={this.mphToKmh}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    hourChartOffset={this.state.hourChartOffset}\n                />\n\n                <DayChart\n                    objArray={this.props.weatherData.daily.data}\n                    fToC={this.fToC}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    isCelsius={this.state.isCelsius}\n                    setHourChartOffset={this.setHourChartOffset}\n                />\n            </React.Fragment>\n        )\n    }\n}\nfunction Attributions(props) {\n    return (\n        <div className='attributions-wrapper grey'>\n            <a href='https://darksky.net/poweredby/' target='_blank' rel='noopener noreferrer'>Weather data powered by Dark Sky</a>\n            <a href='https://locationiq.com/' target='_blank' rel='noopener noreferrer'>Location data search by LocationIQ.com</a>\n            <a href='https://erikflowers.github.io/weather-icons/' target='_blank' rel='noopener noreferrer'>Icons by The Weather Icons</a>\n        </div>\n    )\n}\nclass App extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className='app-wrapper'>\n                    <div className='app-safe-area'>\n                    { this.props.isFailed ? this.props.errorMessage\n                        : this.props.isLoaded ? <AppLoaded {...this.props} /> : <Loading />\n                    }\n                    </div>\n                </div>\n                <Attributions />\n            </React.Fragment>\n        )\n    }\n}\n\nconst WithWeatherQueryApp = withWeatherQuery(App);\nexport default WithWeatherQueryApp;\n","import React, { Component } from 'react';\n\nexport default function withWeatherQuery(WrappedComponent) {\n    return class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isLoaded: false,\n                isFailed: false\n            };\n            this.latitude = null;\n            this.longitude = null;\n            this.weatherData = null;\n            this.geoData = null;\n            this.errorMessage = '';\n            this.sendQuery = this.sendQuery.bind(this);\n            this.useMockLocation = this.useMockLocation.bind(this);\n            this.getGeoLocation = this.getGeoLocation.bind(this);\n        }\n\n        sendQuery() {\n            let isWeatherReady = false;\n            let isGeocodingReady = false;\n            const origin = 'https://www.xiaoxihome.com/';\n            // const origin = 'http://localhost:5000/';\n\n            const fetchOptions = {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'default',\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                redirect: 'follow',\n                referrer: 'client',\n                body: JSON.stringify({\n                    latitude: this.latitude,\n                    longitude: this.longitude\n                })\n            };\n            console.log('fetching weather');\n            fetch(origin + 'api/weather', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        this.weatherData = json.data;\n                        console.log(json.data);\n                        isWeatherReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e));\n\n            console.log('fetching geocoding');\n            fetch(origin + 'api/reversegeocoding', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        this.geoData = json.data;\n                        console.log(json.data);\n                        isGeocodingReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e))\n        }\n        useMockLocation() {\n            // in case of geolocation no available or denied\n            this.latitude = 43.70011;\n            this.longitude = -79.4163;\n            this.sendQuery()\n        }\n        getGeoLocation() {\n            console.log('getting geolocation');\n            if (\"geolocation\" in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.latitude = position.coords.latitude;\n                    this.longitude = position.coords.longitude;\n                    this.sendQuery()\n                }, this.useMockLocation);\n            } else {\n                this.useMockLocation();\n            }\n        }\n        componentDidMount() {\n            console.log('mounted');\n            this.getGeoLocation()\n        }\n        render() {\n            const injectProps = {\n                isLoaded: this.state.isLoaded,\n                weatherData: this.weatherData,\n                geoData: this.geoData,\n                isFailed: this.state.isFailed,\n                errorMessage: this.errorMessage\n            };\n            return (\n                <WrappedComponent {...this.props} {...injectProps}/>\n            )\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WithWeatherQueryApp from './App';\n\nfunction Index(props) {\n    return (\n        <div className='index-wrapper'>\n            <WithWeatherQueryApp />\n        </div>\n    )\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n"],"sourceRoot":""}