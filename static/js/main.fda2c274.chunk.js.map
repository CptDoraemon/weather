{"version":3,"sources":["components/header.js","components/icon.js","components/day-chart.js","components/hour-chart.js","components/selected-summary.js","components/loading.js","App.js","utilities/weather-query.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","geoData","getDisplayTime","selectedDataObj","time","isDaySummary","summary","Component","Icon","style","width","height","objectFit","filename","indexOf","icon","src","process","alt","React","Daily","onClick","setSelectedDataObj","obj","setIsDaySummary","icon_Icon","temperatureHigh","temperatureLow","DayChart","_this","dayName","objArray","map","isCelsius","Math","round","fToC","key","Date","getDay","HourChart","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isReady","tempMax","tempMin","svgHeight","svgWidth","tempArray","xInterval","topTextArea","bottomTextArea","lowestTemperatureHeight","wrapperRef","createRef","temperature","usableHeightForChart","y","chartTop","result","tempText","chartBot","timeText","hasOwnProperty","tempArraySorted","slice","sort","b","length","wrapperStyle","window","getComputedStyle","current","wrapperWidth","parseInt","getPropertyValue","console","log","setState","_this2","lineStyle","stroke","strokeWidth","fillStyle","fill","textStyle","fontSize","lines","Fragment","index","last","getCoordinateY","that","lastX","thatX","temperatureF","hour","getHours","x1","y1","x2","y2","points","concat","x","svg","ref","UnitSwitcher","unitSwitcher","SelectedSummaryLeft","SelectedSummaryRight","precipitation","humidity","windSpeed","SelectedSummary","undefined","precipProbability","mph","mphToKmh","Loading","isTimeout","timeout","showTimeoutMessage","bind","assertThisInitialized","refresh","location","reload","setTimeout","clearTimeout","spanArray","i","animationDelay","span","charAt","push","timeoutWrapper","AppLoaded","weatherData","currently","timeStamp","isDayOnly","dateObj","dayOnly","hours","minutes","getMinutes","f","isCelsiusNow","trueOrFalse","states","data","tools","injectProps","objectSpread","header_Header","selected_summary_SelectedSummary","hour_chart_HourChart","hourly","day_chart_DayChart","daily","Attributions","href","target","rel","WrappedComponent","App","isFailed","errorMessage","isLoaded","App_AppLoaded","loading_Loading","WithWeatherQueryApp","_Component","_class","latitude","longitude","sendQuery","useMockLoacation","getGeoLocation","inherits","createClass","value","isWeatherReady","isGeocodingReady","origin","fetchOptions","method","mode","cache","credentials","headers","content-type","redirect","referrer","body","JSON","stringify","fetch","then","res","json","status","catch","e","_this3","navigator","geolocation","getCurrentPosition","position","coords","assign","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.fda2c274.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.css';\nimport '../App.css';\n\nexport default class Header extends Component {\n    render() {\n\n        return (\n            <div className='header-wrapper quarter-height-wrapper grey'>\n                <h1> { this.props.geoData } </h1>\n                <h2> { this.props.getDisplayTime(this.props.selectedDataObj.time, this.props.isDaySummary) } </h2>\n                <h2> { this.props.selectedDataObj.summary } </h2>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Icon extends React.Component {\n    render() {\n        const style = {\n            width: this.props.width,\n            height: this.props.height,\n            objectFit: 'cover'\n        };\n        const availableIcons = ['clear-day', 'clear-night', 'rain', 'snow', 'sleet', 'wind', 'fog', 'cloudy', 'partly-cloudy-day', 'partly-cloudy-night'];\n        const filename = availableIcons.indexOf(this.props.icon) === -1 ? 'na.svg' : this.props.icon + '.svg';\n        return (\n            <img src={process.env.PUBLIC_URL + '/svg/' + filename} style={style} alt={this.props.icon} />\n        )\n    }\n};","import React, { Component } from 'react';\nimport './day-chart.css';\nimport '../App.css';\nimport Icon from './icon';\n\nfunction Daily(props) {\n    return (\n        <div className='daily-wrapper' onClick={()=>{props.setSelectedDataObj(props.obj);props.setIsDaySummary(true)}}>\n            { props.time }\n            <Icon width='50px' height='50px' icon={props.icon}/>\n            <div className='daily-temp'>\n                <span className='daily-temp-high'>{ props.temperatureHigh }&#176;</span>\n                <span className='daily-temp-low'>{ props.temperatureLow }&#176;</span>\n            </div>\n        </div>\n    )\n}\n\nexport default class DayChart extends Component {\n    render() {\n        const dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n        return (\n            <div className='daychart-wrapper quarter-height-wrapper'>\n                { this.props.objArray.map(obj => {\n                    const temperatureHigh = this.props.isCelsius ? Math.round(this.props.fToC(obj.temperatureHigh)) : Math.round(obj.temperatureHigh);\n                    const temperatureLow = this.props.isCelsius ? Math.round(this.props.fToC(obj.temperatureLow)) : Math.round(obj.temperatureLow);\n                    return (\n                        <Daily\n                            key={obj.time}\n                            icon={obj.icon}\n                            time={dayName[(new Date(obj.time * 1000)).getDay()]}\n                            temperatureHigh={temperatureHigh}\n                            temperatureLow={temperatureLow}\n                            obj={obj}\n                            setSelectedDataObj={this.props.setSelectedDataObj}\n                            setIsDaySummary={this.props.setIsDaySummary}\n                        />\n                        )\n                }) }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './hour-chart.css';\n\nexport default class HourChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false\n        };\n        this.tempMax = null;\n        this.tempMin = null;\n        this.svgHeight = null;\n        this.svgWidth = null;\n        this.tempArray = null;\n        this.xInterval = null;\n        this.topTextArea = null;\n        this.bottomTextArea = null;\n        this.lowestTemperatureHeight = null;\n\n        this.wrapperRef = React.createRef();\n    }\n    getCoordinateY(temperature) {\n        // NOT INVERTED UNTIL RIGHT BEFORE RETURN\n        const usableHeightForChart = this.svgHeight - this.topTextArea - this.bottomTextArea - this.lowestTemperatureHeight;\n        const y = ((temperature - this.tempMin) / (this.tempMax - this.tempMin)) * usableHeightForChart;\n        const chartTop = this.bottomTextArea + this.lowestTemperatureHeight + y;\n\n        const result = {\n            tempText: chartTop + 10,\n            chartTop: chartTop,\n            chartBot: this.bottomTextArea,\n            timeText: 5\n        };\n        // invert\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                result[key] = this.svgHeight - result[key];\n            }\n        }\n        return result\n    }\n    componentDidMount() {\n        this.tempArray = this.props.objArray.map(obj => obj.temperature);\n        const tempArraySorted = this.tempArray.slice().sort((a, b) => a - b);\n        this.tempMax = tempArraySorted[tempArraySorted.length - 1];\n        this.tempMin = tempArraySorted[0];\n        //\n        const wrapperStyle = window.getComputedStyle(this.wrapperRef.current, null);\n        const wrapperWidth = window.parseInt(wrapperStyle.getPropertyValue(\"width\"));\n        console.log(wrapperWidth);\n        this.svgWidth = wrapperWidth * 8;\n        this.svgHeight = 100;\n        this.xInterval = this.svgWidth / (24 * 8 - 1);\n        //\n        this.topTextArea = 20;\n        this.bottomTextArea = 20;\n        this.lowestTemperatureHeight = 10;\n        //\n        this.setState({isReady: true})\n    }\n    render() {\n        // this.props.objArray;\n        const lineStyle = {\n            stroke: 'rgb(29, 161, 242)',\n            strokeWidth: 2\n        };\n        const fillStyle = {\n            fill: 'rgba(29, 161, 242, 0.5)'\n        };\n        const textStyle = {\n            fill: 'rgb(150, 150, 150)',\n            fontSize: '12px'\n        };\n        const lines = (\n            <React.Fragment>\n                {\n                    this.props.objArray.map((obj, index) => {\n                        if (index !== 0) {\n                            const last = this.getCoordinateY(this.props.objArray[index - 1].temperature);\n                            const that = this.getCoordinateY(obj.temperature);\n                            const lastX = (index - 1) * this.xInterval;\n                            const thatX = index * this.xInterval;\n\n                            const temperatureF = this.props.objArray[index - 1].temperature;\n                            const temperature = this.props.isCelsius ? Math.round(this.props.fToC(temperatureF)) : Math.round(temperatureF);\n                            //\n                            const hour = new Date(obj.time * 1000).getHours() + ':00';\n                            //\n                            return (\n                                <React.Fragment key={obj.time}>\n                                    <line  x1={lastX} y1={last.chartTop} x2={thatX} y2={that.chartTop} style={lineStyle} />\n                                    <polygon points={`${lastX},${last.chartBot} ${lastX},${last.chartTop} ${thatX},${that.chartTop} ${thatX},${that.chartBot}`} style={fillStyle} />\n\n                                    {\n                                        (index - 1) % 3 === 0 ?\n                                            <React.Fragment>\n                                                <text x={lastX} y={last.tempText} style={textStyle}>{ temperature }</text>\n                                                <text x={lastX} y={last.timeText} style={textStyle}>{ hour }</text>\n                                            </React.Fragment>\n                                            : null\n                                    }\n\n\n                                </React.Fragment>\n                            )\n                        } else return null\n                    })\n                }\n            </React.Fragment>\n        );\n        const svg = (\n            <React.Fragment>\n                <svg height={this.svgHeight} width={this.svgWidth}>\n                    { lines }\n                </svg>\n            </React.Fragment>\n        );\n        return (\n            <div className='hour-chart-wrapper quarter-height-wrapper' ref={this.wrapperRef}>\n                { this.state.isReady ? svg : null }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './selected-summary.css';\nimport '../App.css'\nimport Icon from './icon';\n\nfunction UnitSwitcher(props) {\n    return (\n        <div className='unit-switcher-wrapper'>\n            {/*c*/}\n            <span\n                className={!props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}\n                onClick={() => props.unitSwitcher(false)}>&#176;C</span>\n            <span> | </span>\n            {/*f*/}\n            <span\n                onClick={() => props.unitSwitcher(true)}\n                className={props.isCelsius ? 'unit-switcher-button-inactive' : 'unit-switcher-button-active'}>&#176;F</span>\n        </div>\n    )\n}\nfunction SelectedSummaryLeft(props) {\n    return (\n        <div className='selected-summary-left-wrapper'>\n            <Icon icon={props.icon} width='80px' height='80px'/>\n            <div className='selected-summary-temperature'> {props.temperature} </div>\n            <UnitSwitcher unitSwitcher={props.unitSwitcher} isCelsius={props.isCelsius}/>\n        </div>\n    )\n}\nfunction SelectedSummaryRight(props) {\n    return (\n        <div className='selected-summary-right-wrapper grey'>\n            <div className='selected-summary-right-item'>Precipitation: {props.precipitation}%</div>\n            <div className='selected-summary-right-item'>Humidity: {props.humidity}%</div>\n            <div className='selected-summary-right-item'>Wind: {props.windSpeed}</div>\n        </div>\n    )\n}\nexport default class SelectedSummary extends Component {\n    render() {\n        const temperatureF = this.props.selectedDataObj.temperature === undefined ? this.props.selectedDataObj.temperatureHigh : this.props.selectedDataObj.temperature;\n        let temperature = this.props.isCelsius ? this.props.fToC(temperatureF) : temperatureF;\n        temperature = Math.round(temperature);\n        //\n        const precipitation = Math.round(this.props.selectedDataObj.precipProbability * 100);\n        //\n        const humidity = Math.round(this.props.selectedDataObj.humidity * 100);\n        //\n        const mph = this.props.selectedDataObj.windSpeed;\n        const windSpeed = this.props.isCelsius ? Math.round(this.props.mphToKmh(mph)) + ' km/h': Math.round(mph) + ' mph';\n\n        return (\n            <div className='selected-summary-wrapper quarter-height-wrapper'>\n                <SelectedSummaryLeft icon={this.props.selectedDataObj.icon} temperature={temperature} unitSwitcher={this.props.unitSwitcher} isCelsius={this.props.isCelsius}/>\n                <SelectedSummaryRight precipitation={precipitation} humidity={humidity} windSpeed={windSpeed}/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './loading.css';\nimport '../App.css';\n\nexport default class Loading extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isTimeout: false\n        };\n        this.timeout = null;\n        this.showTimeoutMessage = this.showTimeoutMessage.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n    refresh() {\n        if (!this.state.isTimeout) return;\n        window.location.reload()\n    }\n    showTimeoutMessage() {\n        this.setState({\n            isTimeout: true\n        })\n    }\n    componentDidMount() {\n        this.timeout = setTimeout(this.showTimeoutMessage, 5000)\n    }\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n    render() {\n        const text = 'loading...';\n        const spanArray = [];\n        for (let i=0; i<text.length; i++) {\n            const style = {\n                animationDelay: i*0.2+'s'\n            };\n            const span = <span key={'loading'+i} className='loading-span' style={style}>{text.charAt(i)}</span>;\n            spanArray.push(span)\n        }\n\n        const timeoutWrapper = this.state.isTimeout ? 'loading-timeout-active' : 'loading-timeout-inactive';\n        return (\n            <div className='loading-wrapper grey'>\n                <div className={timeoutWrapper}>\n                    <div className='loading-timeout-message'>This app relies on free tiers of the weather and geocoding API services, the responses can be slow sometimes.</div>\n                </div>\n                <div className='loading-text-wrapper grey'>\n                    { spanArray }\n                </div>\n                <div className={timeoutWrapper}>\n                    <div className='loading-refresher' onClick={this.refresh}>refresh?</div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport DayChart from './components/day-chart';\nimport HourChart from './components/hour-chart';\nimport SelectedSummary from \"./components/selected-summary\";\nimport Loading from './components/loading';\nimport withWeatherQuery from './utilities/weather-query';\n\nclass AppLoaded extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDataObj: this.props.weatherData.currently,\n            isDaySummary: false,\n            isCelsius: true\n        };\n        this.unitSwitcher = this.unitSwitcher.bind(this);\n        this.setSelectedDataObj = this.setSelectedDataObj.bind(this);\n        this.setIsDaySummary = this.setIsDaySummary.bind(this);\n    }\n    getDisplayTime(timeStamp, isDayOnly) {\n        const dateObj = new Date(timeStamp * 1000);\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const dayOnly = days[dateObj.getDay()];\n        const hours = dateObj.getHours() < 10 ? '0' + dateObj.getHours() : dateObj.getHours();\n        const minutes = dateObj.getMinutes() < 10 ? '0' + dateObj.getMinutes() : dateObj.getMinutes();\n        const full = dayOnly + ' ' + hours + ':' + minutes;\n        return isDayOnly ? dayOnly : full\n    }\n    fToC(f) {\n        return ((f - 32) * 5/9);\n    }\n    mphToKmh(mph) {\n        return (mph / 1.609);\n    }\n    unitSwitcher(isCelsiusNow) {\n        this.setState({isCelsius: !isCelsiusNow})\n    }\n    setSelectedDataObj(obj) {\n        this.setState({\n            selectedDataObj: obj\n        })\n    }\n    setIsDaySummary(trueOrFalse) {\n        this.setState({isDaySummary: trueOrFalse})\n    }\n    render() {\n        const states = {\n            isDaySummary: this.state.isDaySummary,\n            isCelsius: this.state.isCelsius\n        };\n        const data = {\n            geoData: this.props.geoData,\n            weatherData: this.props.weatherData,\n            selectedDataObj: this.state.selectedDataObj,\n        };\n        const tools = {\n            getDisplayTime: this.getDisplayTime,\n            fToC: this.fToC,\n            mphToKmh: this.mphToKmh,\n            unitSwitcher: this.unitSwitcher,\n            setSelectedDataObj: this.setSelectedDataObj\n        };\n        const injectProps = {...states, ...data, ...tools};\n        return (\n            <React.Fragment>\n                <Header {...injectProps}/>\n                <SelectedSummary {...injectProps}/>\n                <HourChart\n                    objArray={this.props.weatherData.hourly.data}\n                    isCelsius={this.state.isCelsius}\n                    fToC={this.fToC}\n                />\n\n                <DayChart\n                    objArray={this.props.weatherData.daily.data}\n                    fToC={this.fToC}\n                    setSelectedDataObj={this.setSelectedDataObj}\n                    setIsDaySummary={this.setIsDaySummary}\n                    isCelsius={this.state.isCelsius}\n                />\n            </React.Fragment>\n        )\n    }\n}\nfunction Attributions(props) {\n    return (\n        <div className='attributions-wrapper grey'>\n            <a href='https://darksky.net/poweredby/' target='_blank' rel='noopener noreferrer'>Powered by Dark Sky</a>\n            <a href='https://locationiq.com/' target='_blank' rel='noopener noreferrer'>Search by LocationIQ.com</a>\n        </div>\n    )\n}\nclass App extends Component {\n    render() {\n        return (\n            <div className='app-wrapper'>\n                <div className='app-safe-area'>\n                { this.props.isFailed ? this.props.errorMessage\n                    : this.props.isLoaded ? <AppLoaded {...this.props} /> : <Loading />\n                }\n                </div>\n                <Attributions />\n            </div>\n        )\n    }\n}\n\nconst WithWeatherQueryApp = withWeatherQuery(App);\nexport default WithWeatherQueryApp;\n","import React, { Component } from 'react';\n\nexport default function withWeatherQuery(WrappedComponent) {\n    return class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isLoaded: false,\n                isFailed: false\n            };\n            this.latitude = null;\n            this.longitude = null;\n            this.weatherData = null;\n            this.geoData = null;\n            this.errorMessage = '';\n            this.sendQuery = this.sendQuery.bind(this);\n            this.useMockLoacation = this.useMockLoacation.bind(this);\n            this.getGeoLocation = this.getGeoLocation.bind(this);\n        }\n\n        sendQuery() {\n            let isWeatherReady = false;\n            let isGeocodingReady = false;\n            const origin = 'https://www.xiaoxihome.com/';\n            // const origin = 'http://localhost:5000/';\n\n            const fetchOptions = {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'default',\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                redirect: 'follow',\n                referrer: 'client',\n                body: JSON.stringify({\n                    latitude: this.latitude,\n                    longitude: this.longitude\n                })\n            };\n\n            fetch(origin + 'api/weather', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        this.weatherData = json.data;\n                        console.log(json.data);\n                        isWeatherReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e));\n\n            fetch(origin + 'api/reversegeocoding', fetchOptions)\n                .then(res => res.json())\n                .then(json => {\n                    if (json.status === 'success') {\n                        this.geoData = json.data;\n                        console.log(json.data);\n                        isGeocodingReady = true;\n                        if (isWeatherReady && isGeocodingReady) this.setState({isLoaded: true})\n                    } else {\n                        this.errorMessage = json.data;\n                        this.setState({isFailed: true})\n                    }\n                })\n                .catch(e => console.log(e))\n        }\n        useMockLoacation() {\n            // in case of geolocation no available or denied\n            this.latitude = 43.70011;\n            this.longitude = -79.4163;\n            this.sendQuery()\n        }\n        getGeoLocation() {\n            if (\"geolocation\" in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    this.latitude = position.coords.latitude;\n                    this.longitude = position.coords.longitude;\n                    this.sendQuery()\n                }, this.useMockLoacation);\n            } else {\n                this.useMockLoacation();\n            }\n        }\n        componentDidMount() {\n            this.getGeoLocation()\n        }\n        render() {\n            const injectProps = {\n                isLoaded: this.state.isLoaded,\n                weatherData: this.weatherData,\n                geoData: this.geoData,\n                isFailed: this.state.isFailed,\n                errorMessage: this.errorMessage\n            };\n            return (\n                <WrappedComponent {...this.props} {...injectProps}/>\n            )\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WithWeatherQueryApp from './App';\n\nfunction Index(props) {\n    return (\n        <div className='index-wrapper'>\n            <WithWeatherQueryApp />\n        </div>\n    )\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n"],"sourceRoot":""}